apiVersion: v1
kind: List
items:
# RHSSO Database Setup
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The database server's port.
    labels:
      application: sso-init
      component: database
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"      
    name: sso-init-postgresql
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentConfig: sso-init-postgresql
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
    name: sso-init-postgresql-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi  
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
      labels:
        app.kubernetes.io/part-of: secured-rhpam-example
        app.kubernetes.io/name: secured-sso-init
        app.kubernetes.io/component: backend
        app.openshift.io/runtime: sso-init
        app.openshift.io/runtime-version: "7.4"
        application: sso-init     
      name: sso-init-postgresql
  spec:
    replicas: 1
    selector:
      deploymentConfig: sso-init-postgresql
    strategy:
      type: Recreate
    template:
      metadata:    
        labels:
          deploymentConfig: sso-init-postgresql
          application: sso-init
          component: database
          app.kubernetes.io/part-of: secured-rhpam-example
          app.kubernetes.io/name: secured-sso-init
          app.kubernetes.io/component: backend
          app.openshift.io/runtime: sso-init
          app.openshift.io/runtime-version: "7.4" 
        name: sso-init-postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: rhssodbusername
          - name: POSTGRESQL_PASSWORD
            value: rhssodbpassword
          - name: POSTGRESQL_DATABASE
            value: rhsso
          - name: POSTGRESQL_MAX_CONNECTIONS
          - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
          - name: POSTGRESQL_SHARED_BUFFERS
          image: postgresql
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 90
            'successThreshold:': 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 10
          name: sso-init-postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 90
            'successThreshold:': 1
            timeoutSeconds: 10
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: sso-postgresql-pvol
        terminationGracePeriodSeconds: 60
        volumes:
        - name: sso-postgresql-pvol
          persistentVolumeClaim:
            claimName: sso-init-postgresql-claim
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - sso-init-postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:10
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
# RHSSO        
- apiVersion: v1
  kind: Secret
  metadata:
    name: sso-app-secret-init
    labels:
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  data:
    keystore.jks: "/u3+7QAAAAIAAAABAAAAAQAFamJvc3MAAAFShRzrOgAABQEwggT9MA4GCisGAQQBKgIRAQEFAASCBOmDfoVpQxGg4sIk+si6Fl16ZJDq+8FzpEtqsYLEzwmUHe/UMviPkxiH1FRwNzZ0axZ8uvI/zM73xGEYgAyFnVnEbxOf9llHJBbo1LNm7vLlhkVMRQLw6IM9GQVQGMRp40yWyd16+8NHWX1fC8TwduN0bkl8Sv50/meyEimyaM3WGiyfi1KqFNO2TaUAZNHMEWtsgb0BnoQRXQ9BX4HMSm71Kc4+LlvDfbGpRkSQ5hB4jwWf0vHTVualysOV7LdzLWXs/qvHKPpbZtBnXczDW20LJevoTYkjrS80ew/Jpj6z640OxGj1rpH+a4cRN1WkSfYo27zJf4p021fqFtNays3o4jegUK2oXTCZ4ZWIhk4sL/+dBlt3+pKaMst6h4tpdWPUqa7yZuOokl5Y9agA4Z8aBjj4w6VCReNYHVLayvk4V9E5w9cafVguzfKTlWFfUh40nQwkfIXXau+C4HICXCaECXLOju3/0oRqFaC2F6p1Tvkl+poaO+MnC4ShgOXVgOgQSO6FrYtSQzMbp0yWHBQsXLSks1Z48z9zlz4eSQMlV+f3EkIioD+Yb0uUI7fOrFfBUfSOKDJoDg51UVSRBY7Jko4BqCHeFnAnCCwxA0wQbd1HGAUlXJk2xL4M11vGQyOijmWKR0fp5g/ngKyJoDUhwwXYq2jONlbVxWghqoAnvkwzEkkCC1jWErM2lv66EVUfFYRZ/FuVIC2tUOTKs+ZcY7P6ya9F1OOpiQX80JtXL71OR1xqMqyelnoEeH1SymSlIPV8HpzVXzQtqVTgqMiqxDmv+JZMl5jjuFW6oQq26UN/H1oYIZyQDHSL4FunAPh983+wLzjj/Q2dVTZT12md/JTTdozTb0vozbTWGOdTTO+SV7DXyPUQg6xz0stL/6HsLhpVzZBJnufIr7MPl7O9AxI0KdaD4JeFuk63tqMfMSdt5s8D7qcSKuMFzh648NNwoZOFwyn9rIEMw99D9fCybqoLNAuefFialQfimF1jv9wZWriRt7YstUvYC2aZZmGmeUBklrEx77gWaghT+HJv7Dfr4uFw4a6lbpb21aknPx0JmfxmdkyH5sRG2MUojV7LYs3WEhC3UvHWR6MczFWcG7JpC2RYx36R5IIYOD6164erIOUCIETabRjyq2xzXgnkcV8mUI6IKMM62gBi+6HxG/Ls2blKx2hZJeOTiHOVzjV3gZ6VB7Gu9BfAW5bPZMOq7/Z+hQ4xdhf6JPOoRKcieb6CU+LjthZycaEDjvoekessmkgFjX/tMtM9ARjxwwlLtUO0wQRrVETVmxCO0cPHa+UIPgFcAGa9gOlIjYEZmwBRW8tCjCgHKXJXVymQHuBAu6nSmYu/26lbaz7S0a+4yD027KvD7y88ZGH22Uf/bjsPvnRvttIl+p0OHX7qzdaFd2Qfz3P7/vyNoK0vw/kZLXuVbEPkKCYVqFwm1MO5GjrDikOMSb7hm+9PLg4k3Ib80OVv9gJ47hn5QotivHnat02Ga89jsVCN6oxplL5bymQCzsV1wtFEkUzhnyRunvfZ1Z/Z22DouR27fltvbzxC4VMQ+cDZpxVxk4WowgRNP4oLSb08LQoMvIKx54uTu/IBmZxJinvOX11ODtKMgEdHFPEfNgNFSgvIdqo6H0h7w4KxelJT8IxPt3ZvoILX9+0MLrxCE6HSg0oAAAABAAVYLjUwOQAAA0MwggM/MIICJ6ADAgECAgR29XPcMA0GCSqGSIb3DQEBCwUAMFAxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTELMAkGA1UEBxMCU0QxCzAJBgNVBAoTAlJIMQswCQYDVQQLEwJDRTENMAsGA1UEAxMEQmlsbDAeFw0xNjAxMjcyMjAzMjdaFw0xNjA0MjYyMjAzMjdaMFAxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTELMAkGA1UEBxMCU0QxCzAJBgNVBAoTAlJIMQswCQYDVQQLEwJDRTENMAsGA1UEAxMEQmlsbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKuWH7G9DWZrnnW64VVrck1BjBGEWYMVDCVI8ADklap1UT1DHfdZ1CywMDtxOShp+8ZBO6gVfOoBmJ8SAd6roHFI9/N4X4Sl3VLfL/i6HEsxDIhI06bi8VbqzrrM3M6zlhG9B/JaVHkurWwsc2sxkgiGEO1bfYk+26LEM5LD3hmnFtQ7B8Cw5/Qpi0IPUe3gqQvSeAoeXhHtFsD0FgrnF1OwBh5pyG+T9SPJov/iyV9OQMg6QrtOGL/BtAAiqkFGdXOuNWSoOZTBFtq3L8HSwQl0n9Z2QC7X2pgclUbMJQsgc0gwAjCzXscxyDdW0qHLBsvvtghEGRN0BEYO3X4/Au0CAwEAAaMhMB8wHQYDVR0OBBYEFGt3cWZ4Bu0zb9CUY5lJq97rD3cWMA0GCSqGSIb3DQEBCwUAA4IBAQAKF2D2ajXngELf5iNNBOjdexYo7mWAsrD5Eep57oBil440Uoz5pB44hljQ3ItOZz7pyOoF3R+Gx4k5zLykqyU+WYF8PaMHsV6j+/+++dwyVMiIJxdkxPgcGrh/+LEFuSa6aTlyg8A2sHJiQcluJ4Ktn6/X5Yz8JD/h3TrEv8qKUgE719EE+Drqk3hxQxLzYx3v63uvQAWJ7zmk6dFLdLDHYCnrwe0E50Jzd0ZKd/M4ZStFPWqLDajhm9mOaBgU3HmpNoJYMXq+forhGPIF1QttZEoLZhaTzxDh3xvFPBb06rT2pja5mEDQtJR9eJ47H72W5UI8INqohqRK662r/F/bObGzQmqxXoafHVUvT0IS40Rn8GA="
    jgroups.jceks: zs7OzgAAAAIAAAABAAAAAwAKc2VjcmV0LWtleQAAAVDQhuHmrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAAPMA0ECHcwLGK6EDyLAgEUdXEAfgAFAAAAmCu9wRKf1aYYUOEWe406ncPtIdm3147G7MJyWUu2kJVY15a2QxeZi9w5J3AF6T64CvylUuQjpcC4DWXwVn9BefntkBR8CzTiH7VxEqVOQ/OkFS29Inoq8t7/NBaTgTdmMkb4ETV1gIsy/+W6kk7QTqxItCkdKKGFE90Be/7yL3tG16TCy/ABKl7CO6PHa44CqK2PUE1oaJ+WdAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVMN658veJP01V2j9y8bQCYIzViutw==
- apiVersion: v1
  kind: Secret
  metadata:
    name: sso-demo-secret-init
    labels:
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  data:
    sso-demo.json:  WyB7CiAgImlkIiA6ICJtYXN0ZXIiLAogICJyZWFsbSIgOiAibWFzdGVyIiwKICAiZGlzcGxheU5hbWUiIDogInJoLXNzbyIsCiAgImRpc3BsYXlOYW1lSHRtbCIgOiAiPHN0cm9uZz5SZWQgSGF0PC9zdHJvbmc+PHN1cD7Crjwvc3VwPiBTaW5nbGUgU2lnbiBPbiIsCiAgIm5vdEJlZm9yZSIgOiAwLAogICJyZXZva2VSZWZyZXNoVG9rZW4iIDogZmFsc2UsCiAgInJlZnJlc2hUb2tlbk1heFJldXNlIiA6IDAsCiAgImFjY2Vzc1Rva2VuTGlmZXNwYW4iIDogNjAwLAogICJhY2Nlc3NUb2tlbkxpZmVzcGFuRm9ySW1wbGljaXRGbG93IiA6IDkwMCwKICAic3NvU2Vzc2lvbklkbGVUaW1lb3V0IiA6IDE4MDAsCiAgInNzb1Nlc3Npb25NYXhMaWZlc3BhbiIgOiAzNjAwMCwKICAic3NvU2Vzc2lvbklkbGVUaW1lb3V0UmVtZW1iZXJNZSIgOiAwLAogICJzc29TZXNzaW9uTWF4TGlmZXNwYW5SZW1lbWJlck1lIiA6IDAsCiAgIm9mZmxpbmVTZXNzaW9uSWRsZVRpbWVvdXQiIDogMjU5MjAwMCwKICAib2ZmbGluZVNlc3Npb25NYXhMaWZlc3BhbkVuYWJsZWQiIDogZmFsc2UsCiAgIm9mZmxpbmVTZXNzaW9uTWF4TGlmZXNwYW4iIDogNTE4NDAwMCwKICAiYWNjZXNzQ29kZUxpZmVzcGFuIiA6IDYwLAogICJhY2Nlc3NDb2RlTGlmZXNwYW5Vc2VyQWN0aW9uIiA6IDMwMCwKICAiYWNjZXNzQ29kZUxpZmVzcGFuTG9naW4iIDogMTgwMCwKICAiYWN0aW9uVG9rZW5HZW5lcmF0ZWRCeUFkbWluTGlmZXNwYW4iIDogNDMyMDAsCiAgImFjdGlvblRva2VuR2VuZXJhdGVkQnlVc2VyTGlmZXNwYW4iIDogMzAwLAogICJlbmFibGVkIiA6IHRydWUsCiAgInNzbFJlcXVpcmVkIiA6ICJleHRlcm5hbCIsCiAgInJlZ2lzdHJhdGlvbkFsbG93ZWQiIDogZmFsc2UsCiAgInJlZ2lzdHJhdGlvbkVtYWlsQXNVc2VybmFtZSIgOiBmYWxzZSwKICAicmVtZW1iZXJNZSIgOiBmYWxzZSwKICAidmVyaWZ5RW1haWwiIDogZmFsc2UsCiAgImxvZ2luV2l0aEVtYWlsQWxsb3dlZCIgOiB0cnVlLAogICJkdXBsaWNhdGVFbWFpbHNBbGxvd2VkIiA6IGZhbHNlLAogICJyZXNldFBhc3N3b3JkQWxsb3dlZCIgOiBmYWxzZSwKICAiZWRpdFVzZXJuYW1lQWxsb3dlZCIgOiBmYWxzZSwKICAiYnJ1dGVGb3JjZVByb3RlY3RlZCIgOiBmYWxzZSwKICAicGVybWFuZW50TG9ja291dCIgOiBmYWxzZSwKICAibWF4RmFpbHVyZVdhaXRTZWNvbmRzIiA6IDkwMCwKICAibWluaW11bVF1aWNrTG9naW5XYWl0U2Vjb25kcyIgOiA2MCwKICAid2FpdEluY3JlbWVudFNlY29uZHMiIDogNjAsCiAgInF1aWNrTG9naW5DaGVja01pbGxpU2Vjb25kcyIgOiAxMDAwLAogICJtYXhEZWx0YVRpbWVTZWNvbmRzIiA6IDQzMjAwLAogICJmYWlsdXJlRmFjdG9yIiA6IDMwLAogICJwcml2YXRlS2V5IjogIk1JSUVvd0lCQUFLQ0FRRUFvRVRuUG1ONTV4QkpqUnpOL2NzMzBPeko5b2xrdGVMVk5SanpkVHhGT3lSdFMyb3ZEZnpkaGhPOVh6VWNUTWJJc0NPQVp0U3Q4Sys2eXZCWHlwT1NZdkk3NUVVZHlwbWtjSzFLb3B0cVk1S0VCUTFLd2hXdVA3SVdRMGZzaFV3RDZqSTFRV0RmR3hmTS9oMzRGdkVuLzB0SjcxeE4yUDhUSTJZYW53dURaZ29zZG9ieC9QQXZsR1JFQkd1azRCZ21leFRPa0FkbkZ4SVVRY0NraUVaMkM0MXVDcnhpUzRDRWU1T1g5MWFLOUhLWlY0WkpYNnZucU1IbWREbnNNZE8rVUZ0eE9CWVppbythMWpQNFczZDdKNWZHZWlPYVhqUUNPcGl2S25QMnlVMkRQZFdtRE15VmI2N2w4RFJBK2poME9KRktaNUgyZk5nRTNJSTU5dmRzUndJREFRQUJBb0lCQVFDVEgwMXIzeU5yY204aVk5dlE2N2tjU0JJS0NBdjBUL3RLbDlIOXY4c0p4S0cwQmhDVjlaZGhXa09QMzVCUUJuYjZBa3ovbUtMbi9Ga3JyRC9iRFdibS85anM3bW12cnlUZDdxWkI2UXRieG9iOG9Ed05PSnZSaXVpVzhMSjFsdGROS0xQc2hVR3BmRXJJeDdnVFQyTlpIc01MUUorUjRHMndKQzJ4N0g2OXJvcXdLc1FqVUZmV2I4RGZwNHhRKzQzZjk2SVlLd29QNlo3RTBWT2Y3YUlPUzl5blkwQVljYkxHVWR6VThMN044bmpJb3ovSkczWkFEaDVFOWZyQmdqbitLcGE5QnFVdElBTTU0NFJ2WTdHUHFsU1drZDVLNXE5cEM1V2xFWVNnRDB5OHU1aldWMzF6NndPNWtjSnlKU3ZpTjVMMlQ4dTJWd0JGckx1ME5UMzVBb0dCQU5aaXVqWVkrRXZacEE5NXNGTFd0TlFlYmVxSGk2aUsvTERZVkJBdzNjZ2xSM1BwanRwNExCd0xrQ1VqWEV2QmxKa0NEVkR2aUpBR2IxUFNRSUFuUHdtT3MyY1BQaHRWQjVVUFVRL3VKWCs4aEVaNldsSmRBQUNmeXVCdk5WVDZ4bEM4OGNabDhDQVRPQ3Q3cklabjRTb2xrUnR3MFpBanh6Zm1UOWRGdEJsekFvR0JBTDloQTNmSTc5cmlQdGsvZ29qSE54U2NubkNIanFxYmVNMEJBaW1PRGIrN3lnOW90cGNPYkZqWW80amJ1VkFYNVhETXRGZVdqOWhxdmtFMVRHZWpxdk5NWm9zV01oSk5xWHYrREZreEJ1NjRGWGdXemlJQm5iSmhzdEp6dFgvZFMwMGZ5Y2N0QmdRZFVYTWEzcnRHTDdsVGR6MkRWM3lPTTc4UzdyZUp2N3pkQW9HQUo5RTJYSTNPcitmQVBNK1JIQkdjakRrS21TQ0xvOFlNb0p2TklTU3lURllBSzFzWm1TSHdyMVRHZE45WWFRbVBHOHZ4eFRKMzNxZ1RUVElqb0ttcFg1RU5hUHEvd2p2TXFMYXJpNVhqaVJIdVQxaXlKZEg0Q2lXamZJT3JHQmxyYzl0ajNFRmFrOXA5K0RXRUdZSjVvMlpPeVJYdkZpSlBBZWJZdFZiUTJGa0NnWUIzTGtaSG1ZWHRqTW5RNXlFMlpzR2hmMnVYN29ObE1jOEg4K0hSMlJvczFoaWVnZnA3bGNyWmhZaEtHWE9OTW1SN1c2L1BmLzd5cW43ekF1c2krNlRoUVNuMjRncXFwVnl2eitVR3dtWnIwWTNsTEdhUWZPc2xCSHlsWE5PaDNrRWZ0WFVtS1o2K2Z6ZVM5Qi9UQm9GLzZ6K3R1aGFJaGRJcDR2TndyME1OclFLQmdCWVZlMEVScTVnVEdUVjk5d0lrK2o0eTlhVndiL25KdU1vejJPRmRlUnFLLzVQRnpNaWRmODJTQTU2Q09BM1hOZUFJUGJxNEJtLzBhaFl2bU5vbFZRSG5ld1hMSzZuVXhKc0VwUEh0bXpsNFpLM3dNM2tiendjQzNRVVpoaTdOcEtSem1LcW5yVytIaFhMYWNQRHhBTkxCWlBrOHlZaEhDVXJHcTZ2VHVDZm4iLAogICJwdWJsaWNLZXkiOiAiTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFvRVRuUG1ONTV4QkpqUnpOL2NzMzBPeko5b2xrdGVMVk5SanpkVHhGT3lSdFMyb3ZEZnpkaGhPOVh6VWNUTWJJc0NPQVp0U3Q4Sys2eXZCWHlwT1NZdkk3NUVVZHlwbWtjSzFLb3B0cVk1S0VCUTFLd2hXdVA3SVdRMGZzaFV3RDZqSTFRV0RmR3hmTS9oMzRGdkVuLzB0SjcxeE4yUDhUSTJZYW53dURaZ29zZG9ieC9QQXZsR1JFQkd1azRCZ21leFRPa0FkbkZ4SVVRY0NraUVaMkM0MXVDcnhpUzRDRWU1T1g5MWFLOUhLWlY0WkpYNnZucU1IbWREbnNNZE8rVUZ0eE9CWVppbythMWpQNFczZDdKNWZHZWlPYVhqUUNPcGl2S25QMnlVMkRQZFdtRE15VmI2N2w4RFJBK2poME9KRktaNUgyZk5nRTNJSTU5dmRzUndJREFRQUIiLAogICJjZXJ0aWZpY2F0ZSI6ICJNSUlDbXpDQ0FZTUNCZ0Zhdi85TmJEQU5CZ2txaGtpRzl3MEJBUXNGQURBUk1ROHdEUVlEVlFRRERBWnRZWE4wWlhJd0hoY05NVGN3TXpFeU1EQTBPVEkwV2hjTk1qY3dNekV5TURBMU1UQTBXakFSTVE4d0RRWURWUVFEREFadFlYTjBaWEl3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2dST2MrWTNubkVFbU5ITTM5eXpmUTdNbjJpV1MxNHRVMUdQTjFQRVU3SkcxTGFpOE4vTjJHRTcxZk5SeE14c2l3STRCbTFLM3dyN3JLOEZmS2s1Smk4anZrUlIzS21hUndyVXFpbTJwamtvUUZEVXJDRmE0L3NoWkRSK3lGVEFQcU1qVkJZTjhiRjh6K0hmZ1c4U2YvUzBudlhFM1kveE1qWmhxZkM0Tm1DaXgyaHZIODhDK1VaRVFFYTZUZ0dDWjdGTTZRQjJjWEVoUkJ3S1NJUm5ZTGpXNEt2R0pMZ0lSN2s1ZjNWb3IwY3BsWGhrbGZxK2Vvd2VaME9ld3gwNzVRVzNFNEZobUtqNXJXTS9oYmQzc25sOFo2STVwZU5BSTZtSzhxYy9iSlRZTTkxYVlNekpWdnJ1WHdORUQ2T0hRNGtVcG5rZlo4MkFUY2dqbjI5MnhIQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQStSdUVvWmlPUUdmWWZYVlQzZEU2VGgzSU5uUjNuU3ROdVA1QVF2L2NOeURCd0M1eUxVZEJBQkRPVWFQU2I2T1dJWThweEdzNDU3RmN0MGd6UXNQdUU5OVprM0dEZlJOT3FrTUE5NTJPNEdoK0hjMjdOYnpZZkxtaFB5VFNUZTFvS0J4b1ltc21CdzU3Vml4K3JPS2JoTEFIeVZoNVFYbDRoaGJ0cnVMZHFQNkVNd0wxMWVXeWtCQ0oxYjdnQ3VZakNHS3BZYkxLcFN0ZzJ4WG85clBUZDNObW1QWW5wQ1lOckV3bDc2UCsrYTR3OUljc1VuMkVtQnUwUDNuallndHhXdWNUcTlMRDVJMGg0dW9rblpFaXJFUmtYMTFTalFuVHphbnBxOG5LcGhSVjBSZEduV1dTRU40MzhIbDFYUjR6clNSbENsRmxOM01jRjRDNFU0TVZFPSIsCiAgImNvZGVTZWNyZXQiOiAiNDliZDAwMjEtYTYxZi00NDUyLTllZTAtMTAxMDA2MjFkOTE3IiwKICAicm9sZXMiIDogewogICAgInJlYWxtIiA6IFsgewogICAgICAiaWQiIDogIjA5ZWExODk5LWExZmEtNGQ0OS1iYzllLTU0YWZlM2FkMzg1MSIsCiAgICAgICJuYW1lIiA6ICJ1bWFfYXV0aG9yaXphdGlvbiIsCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX3VtYV9hdXRob3JpemF0aW9ufSIsCiAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICJjbGllbnRSb2xlIiA6IGZhbHNlLAogICAgICAiY29udGFpbmVySWQiIDogIm1hc3RlciIsCiAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgfSwgewogICAgICAiaWQiIDogImNmOWNmMmJjLWI3M2EtNGU0MS1hMDIzLTBiOTRhYjU4NDRhMCIsCiAgICAgICJuYW1lIiA6ICJmaW5hbmNpYWxhcHByb3ZlciIsCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiRmluYW5jaWFsIEFwcHJvdmVyIHJvbGUgZm9yIEV4cGVuc2VzIEFwcHJvdmFscyBCdXNpbmVzcyBQcm9jZXNzIChleHBlbnNlcy1hcHByb3ZhbHMta2phcikiLAogICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAiY2xpZW50Um9sZSIgOiBmYWxzZSwKICAgICAgImNvbnRhaW5lcklkIiA6ICJtYXN0ZXIiLAogICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgIH0sIHsKICAgICAgImlkIiA6ICJjMTY2ZjM3Ni1kNDUwLTQ5ODMtYTRkOC01M2FiMjk3YzNmYTUiLAogICAgICAibmFtZSIgOiAiYWRtaW4iLAogICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9hZG1pbn0iLAogICAgICAiY29tcG9zaXRlIiA6IHRydWUsCiAgICAgICJjb21wb3NpdGVzIiA6IHsKICAgICAgICAicmVhbG0iIDogWyAiY3JlYXRlLXJlYWxtIiBdLAogICAgICAgICJjbGllbnQiIDogewogICAgICAgICAgIm1hc3Rlci1yZWFsbSIgOiBbICJtYW5hZ2UtZXZlbnRzIiwgInZpZXctYXV0aG9yaXphdGlvbiIsICJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsICJtYW5hZ2UtY2xpZW50cyIsICJxdWVyeS11c2VycyIsICJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsICJjcmVhdGUtY2xpZW50IiwgInZpZXctZXZlbnRzIiwgInZpZXctY2xpZW50cyIsICJtYW5hZ2UtcmVhbG0iLCAidmlldy11c2VycyIsICJtYW5hZ2UtdXNlcnMiLCAicXVlcnktY2xpZW50cyIsICJxdWVyeS1yZWFsbXMiLCAiaW1wZXJzb25hdGlvbiIsICJ2aWV3LXJlYWxtIiwgIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCAicXVlcnktZ3JvdXBzIiBdCiAgICAgICAgfQogICAgICB9LAogICAgICAiY2xpZW50Um9sZSIgOiBmYWxzZSwKICAgICAgImNvbnRhaW5lcklkIiA6ICJtYXN0ZXIiLAogICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI5ZWY4Yzk2Mi1iNDFhLTRjNmMtOGU4Ni1hOGMyMmJkZTc4MDgiLAogICAgICAibmFtZSIgOiAiY3JlYXRlLXJlYWxtIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfY3JlYXRlLXJlYWxtfSIsCiAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICJjbGllbnRSb2xlIiA6IGZhbHNlLAogICAgICAiY29udGFpbmVySWQiIDogIm1hc3RlciIsCiAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgfSwgewogICAgICAiaWQiIDogIjBhNzU4NTFlLTYzZjAtNDVkMi04ZTVlLWQ0MzIxOGFhOWEwOCIsCiAgICAgICJuYW1lIiA6ICJleGFtcGxlLWFkbWluIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIEV4YW1wbGUgYWRtaW5pc3RyYXRvciByb2xlIiwKICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgImNsaWVudFJvbGUiIDogZmFsc2UsCiAgICAgICJjb250YWluZXJJZCIgOiAibWFzdGVyIiwKICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiNzAwMmRlYWMtNWNmNS00MTc2LWJkNWEtNmIwNGJkOTdiMDM0IiwKICAgICAgIm5hbWUiIDogIm9mZmxpbmVfYWNjZXNzIiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfb2ZmbGluZS1hY2Nlc3N9IiwKICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgImNsaWVudFJvbGUiIDogZmFsc2UsCiAgICAgICJjb250YWluZXJJZCIgOiAibWFzdGVyIiwKICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiZjRhN2UzMDMtNTk2Mi00YjM5LWIwNDAtMzI3NDQzYjMwMDAxIiwKICAgICAgIm5hbWUiIDogImtpZS1zZXJ2ZXIiLAogICAgICAiZGVzY3JpcHRpb24iIDogIlJIUEFNIDcueCBBUEkgQWNjZXNzIFJvbGUiLAogICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAiY2xpZW50Um9sZSIgOiBmYWxzZSwKICAgICAgImNvbnRhaW5lcklkIiA6ICJtYXN0ZXIiLAogICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgIH0gXSwKICAgICJjbGllbnQiIDogewogICAgICAiZGVtb2FwcCIgOiBbIF0sCiAgICAgICJoci1leHBlbnNlcy1idXNpbmVzcy1hcHBsaWNhdGlvbi1zZXJ2aWNlIiA6IFsgXSwKICAgICAgInNlY3VyZWQtZXhhbXBsZS1lbmRwb2ludCIgOiBbIHsKICAgICAgICAiaWQiIDogIjFmNGJlYTE1LWEyYjMtNGEzNC1hZmM5LWMwZTI2NGJlODEzNiIsCiAgICAgICAgIm5hbWUiIDogImV4YW1wbGUtYWRtaW4iLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBFeGFtcGxlIGFkbWluaXN0cmF0b3IgY2xpZW50IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICJmNmNiYTA4Yy1kYTY0LTQ2MjItYjRhMi0wMWE3NGQwNDZlOWQiLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9IF0sCiAgICAgICJzZWN1cml0eS1hZG1pbi1jb25zb2xlIiA6IFsgXSwKICAgICAgImFkbWluLWNsaSIgOiBbIF0sCiAgICAgICJhY2NvdW50LWNvbnNvbGUiIDogWyBdLAogICAgICAiYnJva2VyIiA6IFsgewogICAgICAgICJpZCIgOiAiNDU0Y2Q1ODQtYjFkZS00YWQxLWE3ZGYtZTRkMmFkOWYxMmI4IiwKICAgICAgICAibmFtZSIgOiAicmVhZC10b2tlbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfcmVhZC10b2tlbn0iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjQyMTdjODNmLTkxYjktNDc2MS1iNDAyLTdhOGVhOWU1Y2E1YSIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0gXSwKICAgICAgIm1hc3Rlci1yZWFsbSIgOiBbIHsKICAgICAgICAiaWQiIDogIjgxZTNkYTZhLWRmNmMtNDY2My05NGEzLTVhYmFhYzEzYTY2OCIsCiAgICAgICAgIm5hbWUiIDogIm1hbmFnZS1ldmVudHMiLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX21hbmFnZS1ldmVudHN9IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICIxNWE4Y2I1OS03NDgwLTQ3ZmEtYjBjMy00YmRkZTU0OGU4MzIiLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9LCB7CiAgICAgICAgImlkIiA6ICIwZGEwNTNkMC0wNmQ3LTQ5NjEtYmMzNy02NzI0MzNmYzFlNjUiLAogICAgICAgICJuYW1lIiA6ICJ2aWV3LWF1dGhvcml6YXRpb24iLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX3ZpZXctYXV0aG9yaXphdGlvbn0iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogImQ3NWIyYzBlLWQ4MTgtNDIzMC05Zjc4LWVkODhhYzJkMTNlNSIsCiAgICAgICAgIm5hbWUiIDogIm1hbmFnZS1hdXRob3JpemF0aW9uIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9tYW5hZ2UtYXV0aG9yaXphdGlvbn0iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjQzODNkY2MyLTBkMzUtNGRiZi04NDQ3LWE4NWQ4NDFmMDlkNCIsCiAgICAgICAgIm5hbWUiIDogIm1hbmFnZS1jbGllbnRzIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9tYW5hZ2UtY2xpZW50c30iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjJjYmQ0NjQ1LWMxOWYtNGY5OS1iYzc4LTVlMThhZTU4OTg1ZSIsCiAgICAgICAgIm5hbWUiIDogInF1ZXJ5LXVzZXJzIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9xdWVyeS11c2Vyc30iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjkwNzFmODZmLWU3ZDUtNDAzZC05NzY5LThjZjU2MzZiNzRmYyIsCiAgICAgICAgIm5hbWUiIDogInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV92aWV3LWlkZW50aXR5LXByb3ZpZGVyc30iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjdmYTVmNjNiLWJhMzktNDk2ZS05OWVlLWNhZTMzNDIzYWY5YiIsCiAgICAgICAgIm5hbWUiIDogImNyZWF0ZS1jbGllbnQiLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX2NyZWF0ZS1jbGllbnR9IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICIxNWE4Y2I1OS03NDgwLTQ3ZmEtYjBjMy00YmRkZTU0OGU4MzIiLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9LCB7CiAgICAgICAgImlkIiA6ICJmMDg2MTg4Mi1lMzM3LTQyYmItOWQyNy1jZDUyZmZhY2MzZjciLAogICAgICAgICJuYW1lIiA6ICJ2aWV3LWV2ZW50cyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfdmlldy1ldmVudHN9IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICIxNWE4Y2I1OS03NDgwLTQ3ZmEtYjBjMy00YmRkZTU0OGU4MzIiLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9LCB7CiAgICAgICAgImlkIiA6ICJiNDA1NmM1ZC0xYWMxLTQzYmItOTEzYi1mN2JlYjIxMzY2NTIiLAogICAgICAgICJuYW1lIiA6ICJ2aWV3LWNsaWVudHMiLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX3ZpZXctY2xpZW50c30iLAogICAgICAgICJjb21wb3NpdGUiIDogdHJ1ZSwKICAgICAgICAiY29tcG9zaXRlcyIgOiB7CiAgICAgICAgICAiY2xpZW50IiA6IHsKICAgICAgICAgICAgIm1hc3Rlci1yZWFsbSIgOiBbICJxdWVyeS1jbGllbnRzIiBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiMTVhOGNiNTktNzQ4MC00N2ZhLWIwYzMtNGJkZGU1NDhlODMyIiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSwgewogICAgICAgICJpZCIgOiAiNTY1ODUzZGEtYWYxYi00NTU1LWJlNzctMmE0N2NiZGNlMjJhIiwKICAgICAgICAibmFtZSIgOiAibWFuYWdlLXJlYWxtIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9tYW5hZ2UtcmVhbG19IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICIxNWE4Y2I1OS03NDgwLTQ3ZmEtYjBjMy00YmRkZTU0OGU4MzIiLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9LCB7CiAgICAgICAgImlkIiA6ICIyNTNmYjk4OC00Mzg0LTQ5ODItYjYwOS02MzY5YjEwMGM0YzIiLAogICAgICAgICJuYW1lIiA6ICJ2aWV3LXVzZXJzIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV92aWV3LXVzZXJzfSIsCiAgICAgICAgImNvbXBvc2l0ZSIgOiB0cnVlLAogICAgICAgICJjb21wb3NpdGVzIiA6IHsKICAgICAgICAgICJjbGllbnQiIDogewogICAgICAgICAgICAibWFzdGVyLXJlYWxtIiA6IFsgInF1ZXJ5LXVzZXJzIiwgInF1ZXJ5LWdyb3VwcyIgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjIwM2YzNTYwLTIwYjMtNDVmYi1hMDE0LTZiMWE0ODg0ODM4NCIsCiAgICAgICAgIm5hbWUiIDogIm1hbmFnZS11c2VycyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfbWFuYWdlLXVzZXJzfSIsCiAgICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiMTVhOGNiNTktNzQ4MC00N2ZhLWIwYzMtNGJkZGU1NDhlODMyIiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSwgewogICAgICAgICJpZCIgOiAiYzI3OWZkMjktZWFlZS00ZDVmLWE3NDEtYWM5YzE0MjQyYzExIiwKICAgICAgICAibmFtZSIgOiAicXVlcnktY2xpZW50cyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfcXVlcnktY2xpZW50c30iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjFmYjIxMWYyLWFkNjUtNGM0Zi1hMjNjLTQ1ODcyNzA2ZGMyYiIsCiAgICAgICAgIm5hbWUiIDogInF1ZXJ5LXJlYWxtcyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfcXVlcnktcmVhbG1zfSIsCiAgICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiMTVhOGNiNTktNzQ4MC00N2ZhLWIwYzMtNGJkZGU1NDhlODMyIiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSwgewogICAgICAgICJpZCIgOiAiYWUyMTllNzItNjVhOS00YzQ1LWFlNTYtNDNkZDZmNmJiMjMxIiwKICAgICAgICAibmFtZSIgOiAiaW1wZXJzb25hdGlvbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIke3JvbGVfaW1wZXJzb25hdGlvbn0iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjU2NDgwZTAyLTdmMTQtNGE4ZS04MjVkLTVkM2U5OTQ4ZGExNCIsCiAgICAgICAgIm5hbWUiIDogInZpZXctcmVhbG0iLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX3ZpZXctcmVhbG19IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICIxNWE4Y2I1OS03NDgwLTQ3ZmEtYjBjMy00YmRkZTU0OGU4MzIiLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9LCB7CiAgICAgICAgImlkIiA6ICJkMzQ4ZTliZi1lMmI0LTRiOWMtOGNiYS1jZWE5OWM2YmIzMmUiLAogICAgICAgICJuYW1lIiA6ICJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9tYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzfSIsCiAgICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiMTVhOGNiNTktNzQ4MC00N2ZhLWIwYzMtNGJkZGU1NDhlODMyIiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSwgewogICAgICAgICJpZCIgOiAiMzg2MGQwNzItYmZiOS00MDE2LTg1NDctYmRkNWUyM2NlNzQyIiwKICAgICAgICAibmFtZSIgOiAicXVlcnktZ3JvdXBzIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9xdWVyeS1ncm91cHN9IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICIxNWE4Y2I1OS03NDgwLTQ3ZmEtYjBjMy00YmRkZTU0OGU4MzIiLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9IF0sCiAgICAgICJwYW0tY2xpZW50LXNlcnZpY2UiIDogWyB7CiAgICAgICAgImlkIiA6ICJmZGYyMzcxNy0xZDVhLTRmNWEtOGJiMS05NTNlNWZhMjZlNjciLAogICAgICAgICJuYW1lIiA6ICJ1bWFfcHJvdGVjdGlvbiIsCiAgICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiZTg3YjY1NjctNTEwNS00ZDE2LTkzZjUtYmYwZDNjM2VhN2FiIiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSBdLAogICAgICAiYWNjb3VudCIgOiBbIHsKICAgICAgICAiaWQiIDogIjBjYjFhYjQ2LTBjYmEtNGY0Zi05MDc1LWEyYmQ0Y2VhMzQ5OSIsCiAgICAgICAgIm5hbWUiIDogIm1hbmFnZS1hY2NvdW50IiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9tYW5hZ2UtYWNjb3VudH0iLAogICAgICAgICJjb21wb3NpdGUiIDogdHJ1ZSwKICAgICAgICAiY29tcG9zaXRlcyIgOiB7CiAgICAgICAgICAiY2xpZW50IiA6IHsKICAgICAgICAgICAgImFjY291bnQiIDogWyAibWFuYWdlLWFjY291bnQtbGlua3MiIF0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICJiMDI2ODhlMC1hMDQxLTRlZWYtYTExMS1hOTg3ZTMwNTU2MDciLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9LCB7CiAgICAgICAgImlkIiA6ICJmNTQyOWRmNi00Yzk2LTQ2ZWUtODczOC1jODExMDlmMDY3YTMiLAogICAgICAgICJuYW1lIiA6ICJtYW5hZ2UtYWNjb3VudC1saW5rcyIsCiAgICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiYjAyNjg4ZTAtYTA0MS00ZWVmLWExMTEtYTk4N2UzMDU1NjA3IiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSwgewogICAgICAgICJpZCIgOiAiMzM0MTQyYjItMzk3Ni00ODA5LTg3MGYtZjExNzEyMjZkMDNkIiwKICAgICAgICAibmFtZSIgOiAidmlldy1hcHBsaWNhdGlvbnMiLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX3ZpZXctYXBwbGljYXRpb25zfSIsCiAgICAgICAgImNvbXBvc2l0ZSIgOiBmYWxzZSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiYjAyNjg4ZTAtYTA0MS00ZWVmLWExMTEtYTk4N2UzMDU1NjA3IiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSwgewogICAgICAgICJpZCIgOiAiNjA0MWZiZTQtNTQyMS00MTY4LTg3ZTMtYmI2ZGIyNWFkYzJhIiwKICAgICAgICAibmFtZSIgOiAidmlldy1jb25zZW50IiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV92aWV3LWNvbnNlbnR9IiwKICAgICAgICAiY29tcG9zaXRlIiA6IGZhbHNlLAogICAgICAgICJjbGllbnRSb2xlIiA6IHRydWUsCiAgICAgICAgImNvbnRhaW5lcklkIiA6ICJiMDI2ODhlMC1hMDQxLTRlZWYtYTExMS1hOTg3ZTMwNTU2MDciLAogICAgICAgICJhdHRyaWJ1dGVzIiA6IHsgfQogICAgICB9LCB7CiAgICAgICAgImlkIiA6ICJmZDg5NmJiNC0yODEyLTRjMzItYTNjMy02ZTQzODQzNjMzZjkiLAogICAgICAgICJuYW1lIiA6ICJ2aWV3LXByb2ZpbGUiLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiJHtyb2xlX3ZpZXctcHJvZmlsZX0iLAogICAgICAgICJjb21wb3NpdGUiIDogZmFsc2UsCiAgICAgICAgImNsaWVudFJvbGUiIDogdHJ1ZSwKICAgICAgICAiY29udGFpbmVySWQiIDogImIwMjY4OGUwLWEwNDEtNGVlZi1hMTExLWE5ODdlMzA1NTYwNyIsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9CiAgICAgIH0sIHsKICAgICAgICAiaWQiIDogIjU5MmNmOWYyLTAxNDQtNDQ2ZS1hY2NmLTNlZjM0NmQyYmM5MyIsCiAgICAgICAgIm5hbWUiIDogIm1hbmFnZS1jb25zZW50IiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIiR7cm9sZV9tYW5hZ2UtY29uc2VudH0iLAogICAgICAgICJjb21wb3NpdGUiIDogdHJ1ZSwKICAgICAgICAiY29tcG9zaXRlcyIgOiB7CiAgICAgICAgICAiY2xpZW50IiA6IHsKICAgICAgICAgICAgImFjY291bnQiIDogWyAidmlldy1jb25zZW50IiBdCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2xpZW50Um9sZSIgOiB0cnVlLAogICAgICAgICJjb250YWluZXJJZCIgOiAiYjAyNjg4ZTAtYTA0MS00ZWVmLWExMTEtYTk4N2UzMDU1NjA3IiwKICAgICAgICAiYXR0cmlidXRlcyIgOiB7IH0KICAgICAgfSBdCiAgICB9CiAgfSwKICAiZ3JvdXBzIiA6IFsgXSwKICAiZGVmYXVsdFJvbGVzIiA6IFsgIm9mZmxpbmVfYWNjZXNzIiwgInVtYV9hdXRob3JpemF0aW9uIiBdLAogICJyZXF1aXJlZENyZWRlbnRpYWxzIiA6IFsgInBhc3N3b3JkIiBdLAogICJvdHBQb2xpY3lUeXBlIiA6ICJ0b3RwIiwKICAib3RwUG9saWN5QWxnb3JpdGhtIiA6ICJIbWFjU0hBMSIsCiAgIm90cFBvbGljeUluaXRpYWxDb3VudGVyIiA6IDAsCiAgIm90cFBvbGljeURpZ2l0cyIgOiA2LAogICJvdHBQb2xpY3lMb29rQWhlYWRXaW5kb3ciIDogMSwKICAib3RwUG9saWN5UGVyaW9kIiA6IDMwLAogICJvdHBTdXBwb3J0ZWRBcHBsaWNhdGlvbnMiIDogWyAiRnJlZU9UUCIsICJHb29nbGUgQXV0aGVudGljYXRvciIgXSwKICAid2ViQXV0aG5Qb2xpY3lTaWduYXR1cmVBbGdvcml0aG1zIiA6IFsgIkVTMjU2IiBdLAogICJ3ZWJBdXRoblBvbGljeVJwSWQiIDogIiIsCiAgIndlYkF1dGhuUG9saWN5QXR0ZXN0YXRpb25Db252ZXlhbmNlUHJlZmVyZW5jZSIgOiAibm90IHNwZWNpZmllZCIsCiAgIndlYkF1dGhuUG9saWN5QXV0aGVudGljYXRvckF0dGFjaG1lbnQiIDogIm5vdCBzcGVjaWZpZWQiLAogICJ3ZWJBdXRoblBvbGljeVJlcXVpcmVSZXNpZGVudEtleSIgOiAibm90IHNwZWNpZmllZCIsCiAgIndlYkF1dGhuUG9saWN5VXNlclZlcmlmaWNhdGlvblJlcXVpcmVtZW50IiA6ICJub3Qgc3BlY2lmaWVkIiwKICAid2ViQXV0aG5Qb2xpY3lDcmVhdGVUaW1lb3V0IiA6IDAsCiAgIndlYkF1dGhuUG9saWN5QXZvaWRTYW1lQXV0aGVudGljYXRvclJlZ2lzdGVyIiA6IGZhbHNlLAogICJ3ZWJBdXRoblBvbGljeUFjY2VwdGFibGVBYWd1aWRzIiA6IFsgXSwKICAid2ViQXV0aG5Qb2xpY3lQYXNzd29yZGxlc3NScEVudGl0eU5hbWUiIDogImtleWNsb2FrIiwKICAid2ViQXV0aG5Qb2xpY3lQYXNzd29yZGxlc3NTaWduYXR1cmVBbGdvcml0aG1zIiA6IFsgIkVTMjU2IiBdLAogICJ3ZWJBdXRoblBvbGljeVBhc3N3b3JkbGVzc1JwSWQiIDogIiIsCiAgIndlYkF1dGhuUG9saWN5UGFzc3dvcmRsZXNzQXR0ZXN0YXRpb25Db252ZXlhbmNlUHJlZmVyZW5jZSIgOiAibm90IHNwZWNpZmllZCIsCiAgIndlYkF1dGhuUG9saWN5UGFzc3dvcmRsZXNzQXV0aGVudGljYXRvckF0dGFjaG1lbnQiIDogIm5vdCBzcGVjaWZpZWQiLAogICJ3ZWJBdXRoblBvbGljeVBhc3N3b3JkbGVzc1JlcXVpcmVSZXNpZGVudEtleSIgOiAibm90IHNwZWNpZmllZCIsCiAgIndlYkF1dGhuUG9saWN5UGFzc3dvcmRsZXNzVXNlclZlcmlmaWNhdGlvblJlcXVpcmVtZW50IiA6ICJub3Qgc3BlY2lmaWVkIiwKICAid2ViQXV0aG5Qb2xpY3lQYXNzd29yZGxlc3NDcmVhdGVUaW1lb3V0IiA6IDAsCiAgIndlYkF1dGhuUG9saWN5UGFzc3dvcmRsZXNzQXZvaWRTYW1lQXV0aGVudGljYXRvclJlZ2lzdGVyIiA6IGZhbHNlLAogICJ3ZWJBdXRoblBvbGljeVBhc3N3b3JkbGVzc0FjY2VwdGFibGVBYWd1aWRzIiA6IFsgXSwKICAidXNlcnMiIDogWyB7CiAgICAiaWQiIDogIjI2MjY3N2ZhLTEwMmItNGQ2MC05YTYxLWIxY2EyYWZkNjYzYSIsCiAgICAiY3JlYXRlZFRpbWVzdGFtcCIgOiAxNDg5Mjc5ODgwNjMwLAogICAgInVzZXJuYW1lIiA6ICJhZG1pbiIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgInRvdHAiIDogZmFsc2UsCiAgICAiZW1haWxWZXJpZmllZCIgOiBmYWxzZSwKICAgICJjcmVkZW50aWFscyIgOiBbIHsKICAgICAgImlkIiA6ICIzZGE2NmY1NC02MGVhLTQ4NjktOTE2My0yMDA0YjQ0YzZlZjIiLAogICAgICAidHlwZSIgOiAicGFzc3dvcmQiLAogICAgICAiY3JlYXRlZERhdGUiIDogMTQ4OTI3OTg4MDAwMCwKICAgICAgInNlY3JldERhdGEiIDogIntcInZhbHVlXCI6XCI4Mld5cFFuM3V1T0hCdnRTUmF2bWQvaWtHbnlRUExZWG0rRTVyemswSnBDMnNrSVl4TzZmSnhLeU16RTBGNEIrZTAxMWRIZDMrUExZaXpQZTdOZ05Mdz09XCIsXCJzYWx0XCI6XCJ3OThCcEsrQU1pQmVtL2pXOVkzZkRnPT1cIn0iLAogICAgICAiY3JlZGVudGlhbERhdGEiIDogIntcImhhc2hJdGVyYXRpb25zXCI6Mjc1MDAsXCJhbGdvcml0aG1cIjpcInBia2RmMi1zaGEyNTZcIn0iCiAgICB9IF0sCiAgICAiZGlzYWJsZWFibGVDcmVkZW50aWFsVHlwZXMiIDogWyBdLAogICAgInJlcXVpcmVkQWN0aW9ucyIgOiBbIF0sCiAgICAicmVhbG1Sb2xlcyIgOiBbICJhZG1pbiIsICJvZmZsaW5lX2FjY2VzcyIgXSwKICAgICJjbGllbnRSb2xlcyIgOiB7CiAgICAgICJhY2NvdW50IiA6IFsgIm1hbmFnZS1hY2NvdW50IiwgInZpZXctcHJvZmlsZSIgXQogICAgfSwKICAgICJub3RCZWZvcmUiIDogMCwKICAgICJncm91cHMiIDogWyBdCiAgfSwgewogICAgImlkIiA6ICJjMDE3NWNjYi0wODkyLTRiMzEtODI5Zi1kZGE4NzM4MTVmZTgiLAogICAgImNyZWF0ZWRUaW1lc3RhbXAiIDogMTQ4OTI4MDc3Mzk3MCwKICAgICJ1c2VybmFtZSIgOiAiYWxpY2UiLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJ0b3RwIiA6IGZhbHNlLAogICAgImVtYWlsVmVyaWZpZWQiIDogZmFsc2UsCiAgICAiZmlyc3ROYW1lIiA6ICJBbGljZSIsCiAgICAibGFzdE5hbWUiIDogIkluQ2hhaW5zIiwKICAgICJlbWFpbCIgOiAiYWxpY2VAa2V5Y2xvYWsub3JnIiwKICAgICJjcmVkZW50aWFscyIgOiBbIHsKICAgICAgImlkIiA6ICI5MjVhNTcwOS1iZDI3LTQwYmYtOGFhMC00ODZhNzRlYWNhYjciLAogICAgICAidHlwZSIgOiAicGFzc3dvcmQiLAogICAgICAiY3JlYXRlZERhdGUiIDogMTQ4OTI4MDc5MTAwMCwKICAgICAgInNlY3JldERhdGEiIDogIntcInZhbHVlXCI6XCJYeDlKUHdmYWY3Z0dHMjRGQVF3WnJIQTlVSGdMWlkxQStjYm5JdTRNSlJGUG5sbmFxaldGK3Joa2JtOTNBeHFHQUt5cHErcm43T3dvWTB0cEs4US9DUT09XCIsXCJzYWx0XCI6XCJoQVRycDJMQTI0dEtlK2dpVmluV0h3PT1cIn0iLAogICAgICAiY3JlZGVudGlhbERhdGEiIDogIntcImhhc2hJdGVyYXRpb25zXCI6MjAwMDAsXCJhbGdvcml0aG1cIjpcInBia2RmMlwifSIKICAgIH0gXSwKICAgICJkaXNhYmxlYWJsZUNyZWRlbnRpYWxUeXBlcyIgOiBbIF0sCiAgICAicmVxdWlyZWRBY3Rpb25zIiA6IFsgXSwKICAgICJyZWFsbVJvbGVzIiA6IFsgImV4YW1wbGUtYWRtaW4iLCAib2ZmbGluZV9hY2Nlc3MiIF0sCiAgICAiY2xpZW50Um9sZXMiIDogewogICAgICAic2VjdXJlZC1leGFtcGxlLWVuZHBvaW50IiA6IFsgImV4YW1wbGUtYWRtaW4iIF0sCiAgICAgICJhY2NvdW50IiA6IFsgIm1hbmFnZS1hY2NvdW50IiwgInZpZXctcHJvZmlsZSIgXQogICAgfSwKICAgICJub3RCZWZvcmUiIDogMCwKICAgICJncm91cHMiIDogWyBdCiAgfSwgewogICAgImlkIiA6ICI4NjgwYzljZi0xZTE5LTRmYmYtYTJlOC04ZWI1Nzk1MzEyNGEiLAogICAgImNyZWF0ZWRUaW1lc3RhbXAiIDogMTYxMDQ2MTY0NDc0MywKICAgICJ1c2VybmFtZSIgOiAiZmFkaXJlY3RvcmFwcHJvdmVyIiwKICAgICJlbmFibGVkIiA6IHRydWUsCiAgICAidG90cCIgOiBmYWxzZSwKICAgICJlbWFpbFZlcmlmaWVkIiA6IGZhbHNlLAogICAgImNyZWRlbnRpYWxzIiA6IFsgewogICAgICAiaWQiIDogImI3YTRiYTBjLTQyZGItNGVlYi04ZDYwLTk5YzBhMTY3YWQ5NyIsCiAgICAgICJ0eXBlIiA6ICJwYXNzd29yZCIsCiAgICAgICJjcmVhdGVkRGF0ZSIgOiAxNjEwNDYxNjUxMTA4LAogICAgICAic2VjcmV0RGF0YSIgOiAie1widmFsdWVcIjpcIjZiRkJXcDJlUDk2V0xSLzhzc0RyTmhwZ2R2NDZYb2M3aGFxbWxnMjV2VklrRGs0VS9udzl4WDRHcVJuK2VWQmdrdnBwUmliemVTU0ptaDdiTzZlSm53PT1cIixcInNhbHRcIjpcIjJsdzlHUHNLdmV3M0lZSmU4SGs3S2c9PVwifSIsCiAgICAgICJjcmVkZW50aWFsRGF0YSIgOiAie1wiaGFzaEl0ZXJhdGlvbnNcIjoyNzUwMCxcImFsZ29yaXRobVwiOlwicGJrZGYyLXNoYTI1NlwifSIKICAgIH0gXSwKICAgICJkaXNhYmxlYWJsZUNyZWRlbnRpYWxUeXBlcyIgOiBbIF0sCiAgICAicmVxdWlyZWRBY3Rpb25zIiA6IFsgXSwKICAgICJyZWFsbVJvbGVzIiA6IFsgInVtYV9hdXRob3JpemF0aW9uIiwgImZpbmFuY2lhbGFwcHJvdmVyIiwgIm9mZmxpbmVfYWNjZXNzIiwgImtpZS1zZXJ2ZXIiIF0sCiAgICAiY2xpZW50Um9sZXMiIDogewogICAgICAiYWNjb3VudCIgOiBbICJtYW5hZ2UtYWNjb3VudCIsICJ2aWV3LXByb2ZpbGUiIF0KICAgIH0sCiAgICAibm90QmVmb3JlIiA6IDAsCiAgICAiZ3JvdXBzIiA6IFsgXQogIH0sIHsKICAgICJpZCIgOiAiMWIxZDYwNzQtZDI5Yi00NzFmLTg1M2MtZTBiYjU1Yzg2YjM3IiwKICAgICJjcmVhdGVkVGltZXN0YW1wIiA6IDE2MTA0NjE2NzE4MzQsCiAgICAidXNlcm5hbWUiIDogImZpbmRlcGFwcHJvdmVyMSIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgInRvdHAiIDogZmFsc2UsCiAgICAiZW1haWxWZXJpZmllZCIgOiBmYWxzZSwKICAgICJjcmVkZW50aWFscyIgOiBbIHsKICAgICAgImlkIiA6ICIyZDk5NTgzMC01ZTNhLTQ3N2UtYWEzMC0xODUxNjFjZmQ1NzkiLAogICAgICAidHlwZSIgOiAicGFzc3dvcmQiLAogICAgICAiY3JlYXRlZERhdGUiIDogMTYxMDQ2MTY5MDI3NSwKICAgICAgInNlY3JldERhdGEiIDogIntcInZhbHVlXCI6XCJUSS9Ud2JYUlpYMXBNTkNTSXdsQlpINlZPZnpUUDIyNHo3N1lTb2U5TGRPUWc5d09rbStUcWFzZE9tbmlvc00zL2MrOTdHcy9XM1FlYWNsbktRUERkZz09XCIsXCJzYWx0XCI6XCJ6U3FrRWZkQXQ2SllqS1FTTnBMNGt3PT1cIn0iLAogICAgICAiY3JlZGVudGlhbERhdGEiIDogIntcImhhc2hJdGVyYXRpb25zXCI6Mjc1MDAsXCJhbGdvcml0aG1cIjpcInBia2RmMi1zaGEyNTZcIn0iCiAgICB9IF0sCiAgICAiZGlzYWJsZWFibGVDcmVkZW50aWFsVHlwZXMiIDogWyBdLAogICAgInJlcXVpcmVkQWN0aW9ucyIgOiBbIF0sCiAgICAicmVhbG1Sb2xlcyIgOiBbICJ1bWFfYXV0aG9yaXphdGlvbiIsICJmaW5hbmNpYWxhcHByb3ZlciIsICJvZmZsaW5lX2FjY2VzcyIsICJraWUtc2VydmVyIiBdLAogICAgImNsaWVudFJvbGVzIiA6IHsKICAgICAgImFjY291bnQiIDogWyAibWFuYWdlLWFjY291bnQiLCAidmlldy1wcm9maWxlIiBdCiAgICB9LAogICAgIm5vdEJlZm9yZSIgOiAwLAogICAgImdyb3VwcyIgOiBbIF0KICB9LCB7CiAgICAiaWQiIDogImE3MGQzNTM3LWY4ZTYtNGMxMy1iYjlkLTNlYThkYzA2OThlYiIsCiAgICAiY3JlYXRlZFRpbWVzdGFtcCIgOiAxNjEwNDYxNjk5ODgzLAogICAgInVzZXJuYW1lIiA6ICJmaW5kZXBhcHByb3ZlcjIiLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJ0b3RwIiA6IGZhbHNlLAogICAgImVtYWlsVmVyaWZpZWQiIDogZmFsc2UsCiAgICAiY3JlZGVudGlhbHMiIDogWyB7CiAgICAgICJpZCIgOiAiNzgxYzI5YzktZDRjNS00MTljLTk0YmEtYWMwM2Y0Y2M5OGJlIiwKICAgICAgInR5cGUiIDogInBhc3N3b3JkIiwKICAgICAgImNyZWF0ZWREYXRlIiA6IDE2MTA0NjE3MDQ3OTMsCiAgICAgICJzZWNyZXREYXRhIiA6ICJ7XCJ2YWx1ZVwiOlwidUpjV1ptYTRWdHN0MnNReEtCVkpwcWtENE8yaEZwK3dWbklLQTlTdjBDRDJySmdnZTEzZ3dNVmlNSXhvQWNWdWhOODZpYmNmVXhaWFlpS0VRWGNCdVE9PVwiLFwic2FsdFwiOlwiWXQvMmcyWk9zY3pNQ2RqaHlDSWd4dz09XCJ9IiwKICAgICAgImNyZWRlbnRpYWxEYXRhIiA6ICJ7XCJoYXNoSXRlcmF0aW9uc1wiOjI3NTAwLFwiYWxnb3JpdGhtXCI6XCJwYmtkZjItc2hhMjU2XCJ9IgogICAgfSBdLAogICAgImRpc2FibGVhYmxlQ3JlZGVudGlhbFR5cGVzIiA6IFsgXSwKICAgICJyZXF1aXJlZEFjdGlvbnMiIDogWyBdLAogICAgInJlYWxtUm9sZXMiIDogWyAidW1hX2F1dGhvcml6YXRpb24iLCAiZmluYW5jaWFsYXBwcm92ZXIiLCAib2ZmbGluZV9hY2Nlc3MiLCAia2llLXNlcnZlciIgXSwKICAgICJjbGllbnRSb2xlcyIgOiB7CiAgICAgICJhY2NvdW50IiA6IFsgIm1hbmFnZS1hY2NvdW50IiwgInZpZXctcHJvZmlsZSIgXQogICAgfSwKICAgICJub3RCZWZvcmUiIDogMCwKICAgICJncm91cHMiIDogWyBdCiAgfSwgewogICAgImlkIiA6ICJiYmY2ZTkxMS0zMzI1LTQ0NGEtYjgzNy0xMmY1ZjE1MmNmMWIiLAogICAgImNyZWF0ZWRUaW1lc3RhbXAiIDogMTYxMDQ2MTQ0MDYyOCwKICAgICJ1c2VybmFtZSIgOiAiZmlyc3RhcHByb3ZlciIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgInRvdHAiIDogZmFsc2UsCiAgICAiZW1haWxWZXJpZmllZCIgOiBmYWxzZSwKICAgICJjcmVkZW50aWFscyIgOiBbIHsKICAgICAgImlkIiA6ICI0NTk1MTkyNi02M2I0LTQ1ZTEtYTRlMS1kZmFkYjk2MjJmZGEiLAogICAgICAidHlwZSIgOiAicGFzc3dvcmQiLAogICAgICAiY3JlYXRlZERhdGUiIDogMTYxMDQ2MTQ0NTUyOCwKICAgICAgInNlY3JldERhdGEiIDogIntcInZhbHVlXCI6XCJjVWE3TGQ1WjJQSVJvRXZtK2RxSnlZemlwdlJQOGRreU1FMXN0bStDZmpNcGJ6T1FpOHlkeE8veGc2NTFXbHZ3NEJvNEhjV01iNUVyYlFjQ2FkMUl3UT09XCIsXCJzYWx0XCI6XCJ2bXRTM2gwcEQyWGo4TVRKZzE2T2pRPT1cIn0iLAogICAgICAiY3JlZGVudGlhbERhdGEiIDogIntcImhhc2hJdGVyYXRpb25zXCI6Mjc1MDAsXCJhbGdvcml0aG1cIjpcInBia2RmMi1zaGEyNTZcIn0iCiAgICB9IF0sCiAgICAiZGlzYWJsZWFibGVDcmVkZW50aWFsVHlwZXMiIDogWyBdLAogICAgInJlcXVpcmVkQWN0aW9ucyIgOiBbIF0sCiAgICAicmVhbG1Sb2xlcyIgOiBbICJ1bWFfYXV0aG9yaXphdGlvbiIsICJvZmZsaW5lX2FjY2VzcyIsICJraWUtc2VydmVyIiBdLAogICAgImNsaWVudFJvbGVzIiA6IHsKICAgICAgImFjY291bnQiIDogWyAibWFuYWdlLWFjY291bnQiLCAidmlldy1wcm9maWxlIiBdCiAgICB9LAogICAgIm5vdEJlZm9yZSIgOiAwLAogICAgImdyb3VwcyIgOiBbIF0KICB9LCB7CiAgICAiaWQiIDogImJiNGEzYWQ4LWM1NGEtNDAyOS1iMTBkLTJlODk3ZTFjMTNmMSIsCiAgICAiY3JlYXRlZFRpbWVzdGFtcCIgOiAxNjEwNDYxNDU2NDA2LAogICAgInVzZXJuYW1lIiA6ICJzZWNvbmRhcHByb3ZlciIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgInRvdHAiIDogZmFsc2UsCiAgICAiZW1haWxWZXJpZmllZCIgOiBmYWxzZSwKICAgICJjcmVkZW50aWFscyIgOiBbIHsKICAgICAgImlkIiA6ICIwZDYzN2FiOS0yOTk1LTRmYzItYWJiMC03OGE0MWUxOTk5NDciLAogICAgICAidHlwZSIgOiAicGFzc3dvcmQiLAogICAgICAiY3JlYXRlZERhdGUiIDogMTYxMDQ2MTQ2NTAxNSwKICAgICAgInNlY3JldERhdGEiIDogIntcInZhbHVlXCI6XCJlMDVVbEJWdGxPeFdGcURmcXRhcFZLYms5SlpzeUFkaDdXb0o5MG5XUlc2MGR2ditUdHlQZnhLM01ZMHBMYzR4VlV4ZGQzWlB3Nm9oZm5Iem5IYk1wdz09XCIsXCJzYWx0XCI6XCJ3UnhoS252Y0JtZm5zdWpWeWtpYlFBPT1cIn0iLAogICAgICAiY3JlZGVudGlhbERhdGEiIDogIntcImhhc2hJdGVyYXRpb25zXCI6Mjc1MDAsXCJhbGdvcml0aG1cIjpcInBia2RmMi1zaGEyNTZcIn0iCiAgICB9IF0sCiAgICAiZGlzYWJsZWFibGVDcmVkZW50aWFsVHlwZXMiIDogWyBdLAogICAgInJlcXVpcmVkQWN0aW9ucyIgOiBbIF0sCiAgICAicmVhbG1Sb2xlcyIgOiBbICJ1bWFfYXV0aG9yaXphdGlvbiIsICJvZmZsaW5lX2FjY2VzcyIsICJraWUtc2VydmVyIiBdLAogICAgImNsaWVudFJvbGVzIiA6IHsKICAgICAgImFjY291bnQiIDogWyAibWFuYWdlLWFjY291bnQiLCAidmlldy1wcm9maWxlIiBdCiAgICB9LAogICAgIm5vdEJlZm9yZSIgOiAwLAogICAgImdyb3VwcyIgOiBbIF0KICB9LCB7CiAgICAiaWQiIDogImE0NWE2ODgyLWUzZjUtNDhhNy04MzI5LTcxOTZmMDJmZWQ2ZiIsCiAgICAiY3JlYXRlZFRpbWVzdGFtcCIgOiAxNjEwNDYyNjM4Mjc4LAogICAgInVzZXJuYW1lIiA6ICJzZXJ2aWNlLWFjY291bnQtcGFtLWNsaWVudC1zZXJ2aWNlIiwKICAgICJlbmFibGVkIiA6IHRydWUsCiAgICAidG90cCIgOiBmYWxzZSwKICAgICJlbWFpbFZlcmlmaWVkIiA6IGZhbHNlLAogICAgInNlcnZpY2VBY2NvdW50Q2xpZW50SWQiIDogInBhbS1jbGllbnQtc2VydmljZSIsCiAgICAiY3JlZGVudGlhbHMiIDogWyBdLAogICAgImRpc2FibGVhYmxlQ3JlZGVudGlhbFR5cGVzIiA6IFsgXSwKICAgICJyZXF1aXJlZEFjdGlvbnMiIDogWyBdLAogICAgInJlYWxtUm9sZXMiIDogWyAidW1hX2F1dGhvcml6YXRpb24iLCAib2ZmbGluZV9hY2Nlc3MiIF0sCiAgICAiY2xpZW50Um9sZXMiIDogewogICAgICAicGFtLWNsaWVudC1zZXJ2aWNlIiA6IFsgInVtYV9wcm90ZWN0aW9uIiBdLAogICAgICAiYWNjb3VudCIgOiBbICJtYW5hZ2UtYWNjb3VudCIsICJ2aWV3LXByb2ZpbGUiIF0KICAgIH0sCiAgICAibm90QmVmb3JlIiA6IDAsCiAgICAiZ3JvdXBzIiA6IFsgXQogIH0sIHsKICAgICJpZCIgOiAiNWRlZWI1NzktYTJkMy00MTNjLThlOWMtYjhmODBjNWE1YWVhIiwKICAgICJjcmVhdGVkVGltZXN0YW1wIiA6IDE2MTA0NjE0MTY0NzMsCiAgICAidXNlcm5hbWUiIDogInN0ZWxpb3MiLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJ0b3RwIiA6IGZhbHNlLAogICAgImVtYWlsVmVyaWZpZWQiIDogZmFsc2UsCiAgICAiY3JlZGVudGlhbHMiIDogWyB7CiAgICAgICJpZCIgOiAiMGUyODA0NzgtMzdiYS00ODA2LTllYjUtMDVmNTU1NGRiYjhkIiwKICAgICAgInR5cGUiIDogInBhc3N3b3JkIiwKICAgICAgImNyZWF0ZWREYXRlIiA6IDE2MTA0NjE0MjE3ODQsCiAgICAgICJzZWNyZXREYXRhIiA6ICJ7XCJ2YWx1ZVwiOlwiT3Nxb0hsNDhNSU1wcm1WSms3WEhuZGU3amlJci83Y29Iai9aQzR2d2VOV3lXT2Y1WWJWT0Rvb0tBTWFoYStEY1A1Z1lZZ0hmUklHa3U3bVVWWDd1TWc9PVwiLFwic2FsdFwiOlwiOWxCdG1kV3NTWVVRbk1ZbFJBYXZpQT09XCJ9IiwKICAgICAgImNyZWRlbnRpYWxEYXRhIiA6ICJ7XCJoYXNoSXRlcmF0aW9uc1wiOjI3NTAwLFwiYWxnb3JpdGhtXCI6XCJwYmtkZjItc2hhMjU2XCJ9IgogICAgfSBdLAogICAgImRpc2FibGVhYmxlQ3JlZGVudGlhbFR5cGVzIiA6IFsgXSwKICAgICJyZXF1aXJlZEFjdGlvbnMiIDogWyBdLAogICAgInJlYWxtUm9sZXMiIDogWyAidW1hX2F1dGhvcml6YXRpb24iLCAib2ZmbGluZV9hY2Nlc3MiLCAia2llLXNlcnZlciIgXSwKICAgICJjbGllbnRSb2xlcyIgOiB7CiAgICAgICJhY2NvdW50IiA6IFsgIm1hbmFnZS1hY2NvdW50IiwgInZpZXctcHJvZmlsZSIgXQogICAgfSwKICAgICJub3RCZWZvcmUiIDogMCwKICAgICJncm91cHMiIDogWyBdCiAgfSBdLAogICJzY29wZU1hcHBpbmdzIiA6IFsgewogICAgImNsaWVudFNjb3BlIiA6ICJvZmZsaW5lX2FjY2VzcyIsCiAgICAicm9sZXMiIDogWyAib2ZmbGluZV9hY2Nlc3MiIF0KICB9IF0sCiAgImNsaWVudFNjb3BlTWFwcGluZ3MiIDogewogICAgImFjY291bnQiIDogWyB7CiAgICAgICJjbGllbnQiIDogImFjY291bnQtY29uc29sZSIsCiAgICAgICJyb2xlcyIgOiBbICJtYW5hZ2UtYWNjb3VudCIgXQogICAgfSBdCiAgfSwKICAiY2xpZW50cyIgOiBbIHsKICAgICJpZCIgOiAiYjAyNjg4ZTAtYTA0MS00ZWVmLWExMTEtYTk4N2UzMDU1NjA3IiwKICAgICJjbGllbnRJZCIgOiAiYWNjb3VudCIsCiAgICAibmFtZSIgOiAiJHtjbGllbnRfYWNjb3VudH0iLAogICAgInJvb3RVcmwiIDogIiR7YXV0aEJhc2VVcmx9IiwKICAgICJiYXNlVXJsIiA6ICIvcmVhbG1zL21hc3Rlci9hY2NvdW50LyIsCiAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIiA6IGZhbHNlLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJhbHdheXNEaXNwbGF5SW5Db25zb2xlIiA6IGZhbHNlLAogICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIiA6ICJjbGllbnQtc2VjcmV0IiwKICAgICJzZWNyZXQiIDogIjE4NDBlMGQ0LTMxMjMtNGZlNS04OGRkLTIwNjAzMDgyNzhjNSIsCiAgICAiZGVmYXVsdFJvbGVzIiA6IFsgIm1hbmFnZS1hY2NvdW50IiwgInZpZXctcHJvZmlsZSIgXSwKICAgICJyZWRpcmVjdFVyaXMiIDogWyAiL3JlYWxtcy9tYXN0ZXIvYWNjb3VudC8qIiBdLAogICAgIndlYk9yaWdpbnMiIDogWyBdLAogICAgIm5vdEJlZm9yZSIgOiAwLAogICAgImJlYXJlck9ubHkiIDogZmFsc2UsCiAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiIDogdHJ1ZSwKICAgICJpbXBsaWNpdEZsb3dFbmFibGVkIiA6IGZhbHNlLAogICAgImRpcmVjdEFjY2Vzc0dyYW50c0VuYWJsZWQiIDogZmFsc2UsCiAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCIgOiBmYWxzZSwKICAgICJwdWJsaWNDbGllbnQiIDogZmFsc2UsCiAgICAiZnJvbnRjaGFubmVsTG9nb3V0IiA6IGZhbHNlLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7IH0sCiAgICAiYXV0aGVudGljYXRpb25GbG93QmluZGluZ092ZXJyaWRlcyIgOiB7IH0sCiAgICAiZnVsbFNjb3BlQWxsb3dlZCIgOiBmYWxzZSwKICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IiA6IDAsCiAgICAicHJvdG9jb2xNYXBwZXJzIiA6IFsgewogICAgICAiaWQiIDogImY5NzFkNDRhLTE0NTctNDg3My1hZjg0LTFkNDM1NWRiODg5MiIsCiAgICAgICJuYW1lIiA6ICJlbWFpbCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJlbWFpbCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZW1haWwiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiOTlhYWNiMDUtMDE1OC00MjM2LTk2YjgtNjljMDFkM2JiNTllIiwKICAgICAgIm5hbWUiIDogInJvbGUgbGlzdCIsCiAgICAgICJwcm90b2NvbCIgOiAic2FtbCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInNpbmdsZSIgOiAiZmFsc2UiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCIgOiAiQmFzaWMiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZSIgOiAiUm9sZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjZlNzNkMmE3LTM1ZjQtNDY4OC05MWMyLTVmODg0YTcyZDczYyIsCiAgICAgICJuYW1lIiA6ICJmYW1pbHkgbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJsYXN0TmFtZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZmFtaWx5X25hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiZDBhMWU4YjQtZGUxOC00YzQxLWE3ZTAtMzMxZGUwMTk5ZGM4IiwKICAgICAgIm5hbWUiIDogImZ1bGwgbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiYTM3MGExOWEtZjg2Yi00NDJjLThmNjMtNWYyZGYwOWRhODU3IiwKICAgICAgIm5hbWUiIDogInVzZXJuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogInVzZXJuYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiODMzYzhiZjEtNzk1MS00ZTI5LTkzMjItNzMwODc3YTE5ZWUyIiwKICAgICAgIm5hbWUiIDogImdpdmVuIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZmlyc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJnaXZlbl9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSBdLAogICAgImRlZmF1bHRDbGllbnRTY29wZXMiIDogWyAid2ViLW9yaWdpbnMiLCAicm9sZV9saXN0IiwgInByb2ZpbGUiLCAicm9sZXMiLCAiZW1haWwiIF0sCiAgICAib3B0aW9uYWxDbGllbnRTY29wZXMiIDogWyAiYWRkcmVzcyIsICJwaG9uZSIsICJvZmZsaW5lX2FjY2VzcyIsICJtaWNyb3Byb2ZpbGUtand0IiBdCiAgfSwgewogICAgImlkIiA6ICI4N2M3OWU5My02MGNjLTQzMmUtOTUzMS04Y2I5NDBhNGFmNjEiLAogICAgImNsaWVudElkIiA6ICJhY2NvdW50LWNvbnNvbGUiLAogICAgIm5hbWUiIDogIiR7Y2xpZW50X2FjY291bnQtY29uc29sZX0iLAogICAgInJvb3RVcmwiIDogIiR7YXV0aEJhc2VVcmx9IiwKICAgICJiYXNlVXJsIiA6ICIvcmVhbG1zL21hc3Rlci9hY2NvdW50LyIsCiAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIiA6IGZhbHNlLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJhbHdheXNEaXNwbGF5SW5Db25zb2xlIiA6IGZhbHNlLAogICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIiA6ICJjbGllbnQtc2VjcmV0IiwKICAgICJzZWNyZXQiIDogIjMxNjg1NTY1LTgyNmYtNGZiNC04NTc3LTgwNTQ2MGEyOWZhNSIsCiAgICAicmVkaXJlY3RVcmlzIiA6IFsgIi9yZWFsbXMvbWFzdGVyL2FjY291bnQvKiIgXSwKICAgICJ3ZWJPcmlnaW5zIiA6IFsgXSwKICAgICJub3RCZWZvcmUiIDogMCwKICAgICJiZWFyZXJPbmx5IiA6IGZhbHNlLAogICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIiA6IHRydWUsCiAgICAiaW1wbGljaXRGbG93RW5hYmxlZCIgOiBmYWxzZSwKICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIiA6IGZhbHNlLAogICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiIDogZmFsc2UsCiAgICAicHVibGljQ2xpZW50IiA6IHRydWUsCiAgICAiZnJvbnRjaGFubmVsTG9nb3V0IiA6IGZhbHNlLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7CiAgICAgICJwa2NlLmNvZGUuY2hhbGxlbmdlLm1ldGhvZCIgOiAiUzI1NiIKICAgIH0sCiAgICAiYXV0aGVudGljYXRpb25GbG93QmluZGluZ092ZXJyaWRlcyIgOiB7IH0sCiAgICAiZnVsbFNjb3BlQWxsb3dlZCIgOiBmYWxzZSwKICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IiA6IDAsCiAgICAicHJvdG9jb2xNYXBwZXJzIiA6IFsgewogICAgICAiaWQiIDogIjM5OTE5ODY0LTdmYzItNDA0NC05NTVmLTVmZTU2M2M4NjUzZSIsCiAgICAgICJuYW1lIiA6ICJhdWRpZW5jZSByZXNvbHZlIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy1hdWRpZW5jZS1yZXNvbHZlLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogeyB9CiAgICB9IF0sCiAgICAiZGVmYXVsdENsaWVudFNjb3BlcyIgOiBbICJ3ZWItb3JpZ2lucyIsICJyb2xlX2xpc3QiLCAicHJvZmlsZSIsICJyb2xlcyIsICJlbWFpbCIgXSwKICAgICJvcHRpb25hbENsaWVudFNjb3BlcyIgOiBbICJhZGRyZXNzIiwgInBob25lIiwgIm9mZmxpbmVfYWNjZXNzIiwgIm1pY3JvcHJvZmlsZS1qd3QiIF0KICB9LCB7CiAgICAiaWQiIDogImY0ZjdlZjBmLWZhMjItNDU4OS1iMWFkLTNmZTQ4MmM0OTZiNyIsCiAgICAiY2xpZW50SWQiIDogImFkbWluLWNsaSIsCiAgICAibmFtZSIgOiAiJHtjbGllbnRfYWRtaW4tY2xpfSIsCiAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIiA6IGZhbHNlLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJhbHdheXNEaXNwbGF5SW5Db25zb2xlIiA6IGZhbHNlLAogICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIiA6ICJjbGllbnQtc2VjcmV0IiwKICAgICJzZWNyZXQiIDogImM3YzE1OThiLTBjNmQtNDhmYi05ODk3LTVmYjI4ZDQ2Y2Q5OSIsCiAgICAicmVkaXJlY3RVcmlzIiA6IFsgXSwKICAgICJ3ZWJPcmlnaW5zIiA6IFsgXSwKICAgICJub3RCZWZvcmUiIDogMCwKICAgICJiZWFyZXJPbmx5IiA6IGZhbHNlLAogICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIiA6IGZhbHNlLAogICAgImltcGxpY2l0Rmxvd0VuYWJsZWQiIDogZmFsc2UsCiAgICAiZGlyZWN0QWNjZXNzR3JhbnRzRW5hYmxlZCIgOiB0cnVlLAogICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiIDogZmFsc2UsCiAgICAicHVibGljQ2xpZW50IiA6IHRydWUsCiAgICAiZnJvbnRjaGFubmVsTG9nb3V0IiA6IGZhbHNlLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7IH0sCiAgICAiYXV0aGVudGljYXRpb25GbG93QmluZGluZ092ZXJyaWRlcyIgOiB7IH0sCiAgICAiZnVsbFNjb3BlQWxsb3dlZCIgOiBmYWxzZSwKICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IiA6IDAsCiAgICAicHJvdG9jb2xNYXBwZXJzIiA6IFsgewogICAgICAiaWQiIDogIjdhMTRkYzI5LTUzY2YtNDc1Yy05MDYzLWY4NWJiNjIwYTcyZCIsCiAgICAgICJuYW1lIiA6ICJmdWxsIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImY1ZWY0ODEyLThiZWItNDMzMy04ZTI4LTdlMzZiNjhlN2U0MCIsCiAgICAgICJuYW1lIiA6ICJ1c2VybmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJ1c2VybmFtZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAicHJlZmVycmVkX3VzZXJuYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImQ2NDhkNWIyLTNkMGEtNDgwZC1hNWJmLTI2MmJiNjFiZDFiMSIsCiAgICAgICJuYW1lIiA6ICJlbWFpbCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJlbWFpbCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZW1haWwiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiM2QyN2M4YzEtYTNkNi00N2ExLTk3OTEtYjM5NmNkZWJhYzRiIiwKICAgICAgIm5hbWUiIDogImdpdmVuIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZmlyc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJnaXZlbl9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjBlM2YyZDZkLTg3MmUtNDkyMi04Y2Y3LWE3OWJkOGE1ZGQwZSIsCiAgICAgICJuYW1lIiA6ICJmYW1pbHkgbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJsYXN0TmFtZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZmFtaWx5X25hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiOTBiOWQ3MjktNDBkYi00ODdjLWIyZWItMmM5YzI1MTFhODBjIiwKICAgICAgIm5hbWUiIDogInJvbGUgbGlzdCIsCiAgICAgICJwcm90b2NvbCIgOiAic2FtbCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInNpbmdsZSIgOiAiZmFsc2UiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCIgOiAiQmFzaWMiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZSIgOiAiUm9sZSIKICAgICAgfQogICAgfSBdLAogICAgImRlZmF1bHRDbGllbnRTY29wZXMiIDogWyAid2ViLW9yaWdpbnMiLCAicm9sZV9saXN0IiwgInByb2ZpbGUiLCAicm9sZXMiLCAiZW1haWwiIF0sCiAgICAib3B0aW9uYWxDbGllbnRTY29wZXMiIDogWyAiYWRkcmVzcyIsICJwaG9uZSIsICJvZmZsaW5lX2FjY2VzcyIsICJtaWNyb3Byb2ZpbGUtand0IiBdCiAgfSwgewogICAgImlkIiA6ICI0MjE3YzgzZi05MWI5LTQ3NjEtYjQwMi03YThlYTllNWNhNWEiLAogICAgImNsaWVudElkIiA6ICJicm9rZXIiLAogICAgIm5hbWUiIDogIiR7Y2xpZW50X2Jyb2tlcn0iLAogICAgInN1cnJvZ2F0ZUF1dGhSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJlbmFibGVkIiA6IHRydWUsCiAgICAiYWx3YXlzRGlzcGxheUluQ29uc29sZSIgOiBmYWxzZSwKICAgICJjbGllbnRBdXRoZW50aWNhdG9yVHlwZSIgOiAiY2xpZW50LXNlY3JldCIsCiAgICAic2VjcmV0IiA6ICI0NjlkNWJkMC1iNzliLTQ0YzEtOWMwZi1mMTY3MzBlZjExMGYiLAogICAgInJlZGlyZWN0VXJpcyIgOiBbIF0sCiAgICAid2ViT3JpZ2lucyIgOiBbIF0sCiAgICAibm90QmVmb3JlIiA6IDAsCiAgICAiYmVhcmVyT25seSIgOiBmYWxzZSwKICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAic3RhbmRhcmRGbG93RW5hYmxlZCIgOiB0cnVlLAogICAgImltcGxpY2l0Rmxvd0VuYWJsZWQiIDogZmFsc2UsCiAgICAiZGlyZWN0QWNjZXNzR3JhbnRzRW5hYmxlZCIgOiBmYWxzZSwKICAgICJzZXJ2aWNlQWNjb3VudHNFbmFibGVkIiA6IGZhbHNlLAogICAgInB1YmxpY0NsaWVudCIgOiBmYWxzZSwKICAgICJmcm9udGNoYW5uZWxMb2dvdXQiIDogZmFsc2UsCiAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICJhdHRyaWJ1dGVzIiA6IHsgfSwKICAgICJhdXRoZW50aWNhdGlvbkZsb3dCaW5kaW5nT3ZlcnJpZGVzIiA6IHsgfSwKICAgICJmdWxsU2NvcGVBbGxvd2VkIiA6IGZhbHNlLAogICAgIm5vZGVSZVJlZ2lzdHJhdGlvblRpbWVvdXQiIDogMCwKICAgICJwcm90b2NvbE1hcHBlcnMiIDogWyB7CiAgICAgICJpZCIgOiAiMWY5N2QwODYtYTg4Ny00N2MyLTliYzQtNTBmNWMyYjEzYzU3IiwKICAgICAgIm5hbWUiIDogImZhbWlseSBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImxhc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJmYW1pbHlfbmFtZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI0ZDExNjkwNi0xYTk3LTRhYmQtYTdkYy02YzQwMWVkYTJkMjYiLAogICAgICAibmFtZSIgOiAiZnVsbCBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy1mdWxsLW5hbWUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI3ZDY3MzE0My1hN2I5LTQxNGEtODEwMy0wMjI4NWRhZTY2N2QiLAogICAgICAibmFtZSIgOiAidXNlcm5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAidXNlcm5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogInByZWZlcnJlZF91c2VybmFtZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICJmOGFlMzZhMi02YTA3LTRjMjktYTJmMC03ZDQ0NzZmZjMyMWMiLAogICAgICAibmFtZSIgOiAicm9sZSBsaXN0IiwKICAgICAgInByb3RvY29sIiA6ICJzYW1sIiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJzYW1sLXJvbGUtbGlzdC1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAic2luZ2xlIiA6ICJmYWxzZSIsCiAgICAgICAgImF0dHJpYnV0ZS5uYW1lZm9ybWF0IiA6ICJCYXNpYyIsCiAgICAgICAgImF0dHJpYnV0ZS5uYW1lIiA6ICJSb2xlIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiODUxMDJmN2YtYmY4MC00MjY1LTllODItMWU0ZjYzMjcwNWFhIiwKICAgICAgIm5hbWUiIDogImVtYWlsIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImVtYWlsIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJlbWFpbCIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICIwYTU3YjRlYy05OTZjLTQ3NDctOTI5ZC1kN2QxYmU3ZDAzNDQiLAogICAgICAibmFtZSIgOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJmaXJzdE5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImdpdmVuX25hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9IF0sCiAgICAiZGVmYXVsdENsaWVudFNjb3BlcyIgOiBbICJ3ZWItb3JpZ2lucyIsICJyb2xlX2xpc3QiLCAicHJvZmlsZSIsICJyb2xlcyIsICJlbWFpbCIgXSwKICAgICJvcHRpb25hbENsaWVudFNjb3BlcyIgOiBbICJhZGRyZXNzIiwgInBob25lIiwgIm9mZmxpbmVfYWNjZXNzIiwgIm1pY3JvcHJvZmlsZS1qd3QiIF0KICB9LCB7CiAgICAiaWQiIDogImNiMGJmMzc2LTcyY2YtNGQ5OC05ZDA3LTA0YzRmMzg3YzdlYSIsCiAgICAiY2xpZW50SWQiIDogImRlbW9hcHAiLAogICAgIm5hbWUiIDogIiIsCiAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBkZWZhdWx0IGNsaWVudCBhcHBsaWNhdGlvbiIsCiAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIiA6IGZhbHNlLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJhbHdheXNEaXNwbGF5SW5Db25zb2xlIiA6IGZhbHNlLAogICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIiA6ICJjbGllbnQtc2VjcmV0IiwKICAgICJzZWNyZXQiIDogIjFkYWE1N2EyLWI2MGUtNDY4Yi1hM2FjLTI1YmQyZGMyZWFkYyIsCiAgICAicmVkaXJlY3RVcmlzIiA6IFsgIioiIF0sCiAgICAid2ViT3JpZ2lucyIgOiBbICIqIiBdLAogICAgIm5vdEJlZm9yZSIgOiAwLAogICAgImJlYXJlck9ubHkiIDogZmFsc2UsCiAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiIDogdHJ1ZSwKICAgICJpbXBsaWNpdEZsb3dFbmFibGVkIiA6IGZhbHNlLAogICAgImRpcmVjdEFjY2Vzc0dyYW50c0VuYWJsZWQiIDogdHJ1ZSwKICAgICJzZXJ2aWNlQWNjb3VudHNFbmFibGVkIiA6IGZhbHNlLAogICAgInB1YmxpY0NsaWVudCIgOiBmYWxzZSwKICAgICJmcm9udGNoYW5uZWxMb2dvdXQiIDogZmFsc2UsCiAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICJhdHRyaWJ1dGVzIiA6IHsKICAgICAgInNhbWwuYXNzZXJ0aW9uLnNpZ25hdHVyZSIgOiAiZmFsc2UiLAogICAgICAic2FtbC5mb3JjZS5wb3N0LmJpbmRpbmciIDogImZhbHNlIiwKICAgICAgInNhbWwubXVsdGl2YWx1ZWQucm9sZXMiIDogImZhbHNlIiwKICAgICAgInNhbWwuZW5jcnlwdCIgOiAiZmFsc2UiLAogICAgICAic2FtbF9mb3JjZV9uYW1lX2lkX2Zvcm1hdCIgOiAiZmFsc2UiLAogICAgICAic2FtbC5jbGllbnQuc2lnbmF0dXJlIiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLmF1dGhuc3RhdGVtZW50IiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLnNlcnZlci5zaWduYXR1cmUiIDogImZhbHNlIgogICAgfSwKICAgICJhdXRoZW50aWNhdGlvbkZsb3dCaW5kaW5nT3ZlcnJpZGVzIiA6IHsgfSwKICAgICJmdWxsU2NvcGVBbGxvd2VkIiA6IHRydWUsCiAgICAibm9kZVJlUmVnaXN0cmF0aW9uVGltZW91dCIgOiAtMSwKICAgICJwcm90b2NvbE1hcHBlcnMiIDogWyB7CiAgICAgICJpZCIgOiAiZTFlODhiNWEtNmE0NS00NGZhLThlNmUtYjVjOGFmNjZjNGIwIiwKICAgICAgIm5hbWUiIDogInVzZXJuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogInVzZXJuYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiMDMyZjM5NmUtZDBmYy00MDVkLTk2NGEtODllYzQ5Yzk3ZWRhIiwKICAgICAgIm5hbWUiIDogImdpdmVuIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZmlyc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJnaXZlbl9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjE0ZjBjY2E1LTI2NGItNGY5ZC1hYWM3LTMwODFhMGJhNDA5YiIsCiAgICAgICJuYW1lIiA6ICJmdWxsIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImEwMGM5MzRjLTViMDEtNDMxNS04ODAxLTAwZDg4MzU1YTMzYyIsCiAgICAgICJuYW1lIiA6ICJlbWFpbCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJlbWFpbCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZW1haWwiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiZTYxNjhlNzItZTA5Yi00MDM2LTg0NWMtMDI1MDIxNDljYmI0IiwKICAgICAgIm5hbWUiIDogInJvbGUgbGlzdCIsCiAgICAgICJwcm90b2NvbCIgOiAic2FtbCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInNpbmdsZSIgOiAiZmFsc2UiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCIgOiAiQmFzaWMiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZSIgOiAiUm9sZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjI3MWVkNWI4LWVlYzktNDBhMC04OTEzLTE5ZDBkYzhlMjkwZSIsCiAgICAgICJuYW1lIiA6ICJmYW1pbHkgbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJsYXN0TmFtZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZmFtaWx5X25hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9IF0sCiAgICAiZGVmYXVsdENsaWVudFNjb3BlcyIgOiBbICJ3ZWItb3JpZ2lucyIsICJyb2xlX2xpc3QiLCAicHJvZmlsZSIsICJyb2xlcyIsICJlbWFpbCIgXSwKICAgICJvcHRpb25hbENsaWVudFNjb3BlcyIgOiBbICJhZGRyZXNzIiwgInBob25lIiwgIm9mZmxpbmVfYWNjZXNzIiwgIm1pY3JvcHJvZmlsZS1qd3QiIF0KICB9LCB7CiAgICAiaWQiIDogIjIxYzUzYTY4LWUzMmEtNDA3Yi04M2ZiLWU1NDc1YjU1MmYzMyIsCiAgICAiY2xpZW50SWQiIDogImhyLWV4cGVuc2VzLWJ1c2luZXNzLWFwcGxpY2F0aW9uLXNlcnZpY2UiLAogICAgInN1cnJvZ2F0ZUF1dGhSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJlbmFibGVkIiA6IHRydWUsCiAgICAiYWx3YXlzRGlzcGxheUluQ29uc29sZSIgOiBmYWxzZSwKICAgICJjbGllbnRBdXRoZW50aWNhdG9yVHlwZSIgOiAiY2xpZW50LXNlY3JldCIsCiAgICAic2VjcmV0IiA6ICJhM2UzYzZkNi0wNzZhLTQ3MTQtOTI2NS1jZGJkNTNhZmUyZmEiLAogICAgInJlZGlyZWN0VXJpcyIgOiBbIF0sCiAgICAid2ViT3JpZ2lucyIgOiBbIF0sCiAgICAibm90QmVmb3JlIiA6IDAsCiAgICAiYmVhcmVyT25seSIgOiB0cnVlLAogICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIiA6IHRydWUsCiAgICAiaW1wbGljaXRGbG93RW5hYmxlZCIgOiBmYWxzZSwKICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIiA6IHRydWUsCiAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCIgOiBmYWxzZSwKICAgICJwdWJsaWNDbGllbnQiIDogZmFsc2UsCiAgICAiZnJvbnRjaGFubmVsTG9nb3V0IiA6IGZhbHNlLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7CiAgICAgICJzYW1sLmFzc2VydGlvbi5zaWduYXR1cmUiIDogImZhbHNlIiwKICAgICAgInNhbWwuZm9yY2UucG9zdC5iaW5kaW5nIiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLm11bHRpdmFsdWVkLnJvbGVzIiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLmVuY3J5cHQiIDogImZhbHNlIiwKICAgICAgInNhbWwuc2VydmVyLnNpZ25hdHVyZSIgOiAiZmFsc2UiLAogICAgICAic2FtbC5zZXJ2ZXIuc2lnbmF0dXJlLmtleWluZm8uZXh0IiA6ICJmYWxzZSIsCiAgICAgICJleGNsdWRlLnNlc3Npb24uc3RhdGUuZnJvbS5hdXRoLnJlc3BvbnNlIiA6ICJmYWxzZSIsCiAgICAgICJzYW1sX2ZvcmNlX25hbWVfaWRfZm9ybWF0IiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLmNsaWVudC5zaWduYXR1cmUiIDogImZhbHNlIiwKICAgICAgInRscy5jbGllbnQuY2VydGlmaWNhdGUuYm91bmQuYWNjZXNzLnRva2VucyIgOiAiZmFsc2UiLAogICAgICAic2FtbC5hdXRobnN0YXRlbWVudCIgOiAiZmFsc2UiLAogICAgICAiZGlzcGxheS5vbi5jb25zZW50LnNjcmVlbiIgOiAiZmFsc2UiLAogICAgICAic2FtbC5vbmV0aW1ldXNlLmNvbmRpdGlvbiIgOiAiZmFsc2UiCiAgICB9LAogICAgImF1dGhlbnRpY2F0aW9uRmxvd0JpbmRpbmdPdmVycmlkZXMiIDogeyB9LAogICAgImZ1bGxTY29wZUFsbG93ZWQiIDogdHJ1ZSwKICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IiA6IC0xLAogICAgImRlZmF1bHRDbGllbnRTY29wZXMiIDogWyAid2ViLW9yaWdpbnMiLCAicm9sZV9saXN0IiwgInByb2ZpbGUiLCAicm9sZXMiLCAiZW1haWwiIF0sCiAgICAib3B0aW9uYWxDbGllbnRTY29wZXMiIDogWyAiYWRkcmVzcyIsICJwaG9uZSIsICJvZmZsaW5lX2FjY2VzcyIgXQogIH0sIHsKICAgICJpZCIgOiAiMTVhOGNiNTktNzQ4MC00N2ZhLWIwYzMtNGJkZGU1NDhlODMyIiwKICAgICJjbGllbnRJZCIgOiAibWFzdGVyLXJlYWxtIiwKICAgICJuYW1lIiA6ICJtYXN0ZXIgUmVhbG0iLAogICAgInN1cnJvZ2F0ZUF1dGhSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJlbmFibGVkIiA6IHRydWUsCiAgICAiYWx3YXlzRGlzcGxheUluQ29uc29sZSIgOiBmYWxzZSwKICAgICJjbGllbnRBdXRoZW50aWNhdG9yVHlwZSIgOiAiY2xpZW50LXNlY3JldCIsCiAgICAic2VjcmV0IiA6ICI0NzNhNzkzNi05NTA3LTQ2NjktODNhNi04OWQ0MDk0ZjJjNGIiLAogICAgInJlZGlyZWN0VXJpcyIgOiBbIF0sCiAgICAid2ViT3JpZ2lucyIgOiBbIF0sCiAgICAibm90QmVmb3JlIiA6IDAsCiAgICAiYmVhcmVyT25seSIgOiB0cnVlLAogICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIiA6IHRydWUsCiAgICAiaW1wbGljaXRGbG93RW5hYmxlZCIgOiBmYWxzZSwKICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIiA6IGZhbHNlLAogICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiIDogZmFsc2UsCiAgICAicHVibGljQ2xpZW50IiA6IGZhbHNlLAogICAgImZyb250Y2hhbm5lbExvZ291dCIgOiBmYWxzZSwKICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgImF0dHJpYnV0ZXMiIDogeyB9LAogICAgImF1dGhlbnRpY2F0aW9uRmxvd0JpbmRpbmdPdmVycmlkZXMiIDogeyB9LAogICAgImZ1bGxTY29wZUFsbG93ZWQiIDogdHJ1ZSwKICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IiA6IDAsCiAgICAicHJvdG9jb2xNYXBwZXJzIiA6IFsgewogICAgICAiaWQiIDogImExYmQ4NmFjLTVlMzctNDJjMC04YTQ2LWY5ZmJjMThkNjZhZCIsCiAgICAgICJuYW1lIiA6ICJnaXZlbiBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImZpcnN0TmFtZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZ2l2ZW5fbmFtZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICIxOGE5NDhhNy1kNDdlLTQyODUtYThiZS00YjFkZTQ1M2RkMDgiLAogICAgICAibmFtZSIgOiAiZnVsbCBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy1mdWxsLW5hbWUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI5OWIwNzI2YS0wOWMxLTQ0NDgtOGYxMC01MDhhZmFmZjZiNWMiLAogICAgICAibmFtZSIgOiAidXNlcm5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAidXNlcm5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogInByZWZlcnJlZF91c2VybmFtZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICJlODg5MjE4ZS0zMTM4LTQzMDgtYWRlZS05MTkzZDNhZWZiZjQiLAogICAgICAibmFtZSIgOiAiZmFtaWx5IG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAibGFzdE5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImZhbWlseV9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjdkODI4NDg2LWZjNzktNGI5NS1iNmExLTkwYTJkNjA5ZGI3MCIsCiAgICAgICJuYW1lIiA6ICJlbWFpbCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJlbWFpbCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZW1haWwiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiYmU1ZDY1NzctMDVkOS00ODcyLTkxOGItOWFjYTgyOWRiYjdiIiwKICAgICAgIm5hbWUiIDogInJvbGUgbGlzdCIsCiAgICAgICJwcm90b2NvbCIgOiAic2FtbCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInNpbmdsZSIgOiAiZmFsc2UiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCIgOiAiQmFzaWMiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZSIgOiAiUm9sZSIKICAgICAgfQogICAgfSBdLAogICAgImRlZmF1bHRDbGllbnRTY29wZXMiIDogWyAid2ViLW9yaWdpbnMiLCAicm9sZV9saXN0IiwgInByb2ZpbGUiLCAicm9sZXMiLCAiZW1haWwiIF0sCiAgICAib3B0aW9uYWxDbGllbnRTY29wZXMiIDogWyAiYWRkcmVzcyIsICJwaG9uZSIsICJvZmZsaW5lX2FjY2VzcyIgXQogIH0sIHsKICAgICJpZCIgOiAiZTg3YjY1NjctNTEwNS00ZDE2LTkzZjUtYmYwZDNjM2VhN2FiIiwKICAgICJjbGllbnRJZCIgOiAicGFtLWNsaWVudC1zZXJ2aWNlIiwKICAgICJzdXJyb2dhdGVBdXRoUmVxdWlyZWQiIDogZmFsc2UsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgImFsd2F5c0Rpc3BsYXlJbkNvbnNvbGUiIDogZmFsc2UsCiAgICAiY2xpZW50QXV0aGVudGljYXRvclR5cGUiIDogImNsaWVudC1zZWNyZXQiLAogICAgInNlY3JldCIgOiAiYmNmOTBkNWYtNTZlNS00NTE1LWIxZGItM2NmOTVlOWUzMjA3IiwKICAgICJyZWRpcmVjdFVyaXMiIDogWyAiKiIgXSwKICAgICJ3ZWJPcmlnaW5zIiA6IFsgIioiIF0sCiAgICAibm90QmVmb3JlIiA6IDAsCiAgICAiYmVhcmVyT25seSIgOiBmYWxzZSwKICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAic3RhbmRhcmRGbG93RW5hYmxlZCIgOiB0cnVlLAogICAgImltcGxpY2l0Rmxvd0VuYWJsZWQiIDogZmFsc2UsCiAgICAiZGlyZWN0QWNjZXNzR3JhbnRzRW5hYmxlZCIgOiB0cnVlLAogICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiIDogdHJ1ZSwKICAgICJhdXRob3JpemF0aW9uU2VydmljZXNFbmFibGVkIiA6IHRydWUsCiAgICAicHVibGljQ2xpZW50IiA6IGZhbHNlLAogICAgImZyb250Y2hhbm5lbExvZ291dCIgOiBmYWxzZSwKICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgImF0dHJpYnV0ZXMiIDogewogICAgICAic2FtbC5hc3NlcnRpb24uc2lnbmF0dXJlIiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLmZvcmNlLnBvc3QuYmluZGluZyIgOiAiZmFsc2UiLAogICAgICAic2FtbC5tdWx0aXZhbHVlZC5yb2xlcyIgOiAiZmFsc2UiLAogICAgICAic2FtbC5lbmNyeXB0IiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLnNlcnZlci5zaWduYXR1cmUiIDogImZhbHNlIiwKICAgICAgInNhbWwuc2VydmVyLnNpZ25hdHVyZS5rZXlpbmZvLmV4dCIgOiAiZmFsc2UiLAogICAgICAiZXhjbHVkZS5zZXNzaW9uLnN0YXRlLmZyb20uYXV0aC5yZXNwb25zZSIgOiAiZmFsc2UiLAogICAgICAic2FtbF9mb3JjZV9uYW1lX2lkX2Zvcm1hdCIgOiAiZmFsc2UiLAogICAgICAic2FtbC5jbGllbnQuc2lnbmF0dXJlIiA6ICJmYWxzZSIsCiAgICAgICJ0bHMuY2xpZW50LmNlcnRpZmljYXRlLmJvdW5kLmFjY2Vzcy50b2tlbnMiIDogImZhbHNlIiwKICAgICAgInNhbWwuYXV0aG5zdGF0ZW1lbnQiIDogImZhbHNlIiwKICAgICAgImRpc3BsYXkub24uY29uc2VudC5zY3JlZW4iIDogImZhbHNlIiwKICAgICAgInNhbWwub25ldGltZXVzZS5jb25kaXRpb24iIDogImZhbHNlIgogICAgfSwKICAgICJhdXRoZW50aWNhdGlvbkZsb3dCaW5kaW5nT3ZlcnJpZGVzIiA6IHsgfSwKICAgICJmdWxsU2NvcGVBbGxvd2VkIiA6IHRydWUsCiAgICAibm9kZVJlUmVnaXN0cmF0aW9uVGltZW91dCIgOiAtMSwKICAgICJwcm90b2NvbE1hcHBlcnMiIDogWyB7CiAgICAgICJpZCIgOiAiYWRhMDU3MjQtOTU4Yi00OTAzLTgwYTItNDQ2YzQ0YmRmMTAwIiwKICAgICAgIm5hbWUiIDogImdpdmVuIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZmlyc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJnaXZlbl9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjNlY2JkZTgyLTg2ZWMtNDlmYy1iMjk5LTE3ZjdkNjJkMzg2MiIsCiAgICAgICJuYW1lIiA6ICJDbGllbnQgSUQiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJzZXNzaW9ubW9kZWwtbm90ZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlci5zZXNzaW9uLm5vdGUiIDogImNsaWVudElkIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJjbGllbnRJZCIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICJlMzMxYmFjYS03YmNkLTQ4MGUtOTY3Mi1mMDM3YzQyNTg5NGIiLAogICAgICAibmFtZSIgOiAiZmFtaWx5IG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAibGFzdE5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImZhbWlseV9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImE3Yjc3ZWRlLWM4ODctNDliMC04NWE3LTlmMjlmZDk3MDE3ZSIsCiAgICAgICJuYW1lIiA6ICJmdWxsIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjYxMDdjN2Y3LWZjODEtNDc4NS1iY2UyLWI1MDRiYTZmMzJlZiIsCiAgICAgICJuYW1lIiA6ICJ1c2VybmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJ1c2VybmFtZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAicHJlZmVycmVkX3VzZXJuYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImJiNmI4YjEzLWI0YmQtNGQ1YS04NDFiLWVjYmQ5MjY0N2FiZiIsCiAgICAgICJuYW1lIiA6ICJDbGllbnQgSG9zdCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcnNlc3Npb25tb2RlbC1ub3RlLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyLnNlc3Npb24ubm90ZSIgOiAiY2xpZW50SG9zdCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiY2xpZW50SG9zdCIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI4YmMzZWRjYy0xYzhmLTRhZmEtYWRjOC1hOTcwNDRmZjY2NmQiLAogICAgICAibmFtZSIgOiAiQ2xpZW50IElQIEFkZHJlc3MiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJzZXNzaW9ubW9kZWwtbm90ZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlci5zZXNzaW9uLm5vdGUiIDogImNsaWVudEFkZHJlc3MiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImNsaWVudEFkZHJlc3MiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiZTExMTc5ODQtYmMzMy00ODlmLWIyN2YtNWFjZTIxOGE2N2RlIiwKICAgICAgIm5hbWUiIDogImVtYWlsIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImVtYWlsIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJlbWFpbCIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0gXSwKICAgICJkZWZhdWx0Q2xpZW50U2NvcGVzIiA6IFsgIndlYi1vcmlnaW5zIiwgInJvbGVfbGlzdCIsICJwcm9maWxlIiwgInJvbGVzIiwgImVtYWlsIiBdLAogICAgIm9wdGlvbmFsQ2xpZW50U2NvcGVzIiA6IFsgImFkZHJlc3MiLCAicGhvbmUiLCAib2ZmbGluZV9hY2Nlc3MiLCAibWljcm9wcm9maWxlLWp3dCIgXSwKICAgICJhdXRob3JpemF0aW9uU2V0dGluZ3MiIDogewogICAgICAiYWxsb3dSZW1vdGVSZXNvdXJjZU1hbmFnZW1lbnQiIDogdHJ1ZSwKICAgICAgInBvbGljeUVuZm9yY2VtZW50TW9kZSIgOiAiRU5GT1JDSU5HIiwKICAgICAgInJlc291cmNlcyIgOiBbIHsKICAgICAgICAibmFtZSIgOiAiRGVmYXVsdCBSZXNvdXJjZSIsCiAgICAgICAgInR5cGUiIDogInVybjpwYW0tY2xpZW50LXNlcnZpY2U6cmVzb3VyY2VzOmRlZmF1bHQiLAogICAgICAgICJvd25lck1hbmFnZWRBY2Nlc3MiIDogZmFsc2UsCiAgICAgICAgImF0dHJpYnV0ZXMiIDogeyB9LAogICAgICAgICJfaWQiIDogIjI5Y2U0NWZkLWMyMjEtNDY4Zi04ZWY4LTYwYWE3NjE4NGVkOCIsCiAgICAgICAgInVyaXMiIDogWyAiLyoiIF0KICAgICAgfSBdLAogICAgICAicG9saWNpZXMiIDogWyB7CiAgICAgICAgImlkIiA6ICJjMDUxNzIzYy05NDBkLTQwY2MtOWJkOC02OTU3NDg4ZjFmYWIiLAogICAgICAgICJuYW1lIiA6ICJEZWZhdWx0IFBvbGljeSIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIHBvbGljeSB0aGF0IGdyYW50cyBhY2Nlc3Mgb25seSBmb3IgdXNlcnMgd2l0aGluIHRoaXMgcmVhbG0iLAogICAgICAgICJ0eXBlIiA6ICJqcyIsCiAgICAgICAgImxvZ2ljIiA6ICJQT1NJVElWRSIsCiAgICAgICAgImRlY2lzaW9uU3RyYXRlZ3kiIDogIkFGRklSTUFUSVZFIiwKICAgICAgICAiY29uZmlnIiA6IHsKICAgICAgICAgICJjb2RlIiA6ICIvLyBieSBkZWZhdWx0LCBncmFudHMgYW55IHBlcm1pc3Npb24gYXNzb2NpYXRlZCB3aXRoIHRoaXMgcG9saWN5XG4kZXZhbHVhdGlvbi5ncmFudCgpO1xuIgogICAgICAgIH0KICAgICAgfSwgewogICAgICAgICJpZCIgOiAiNDYxMzI1OGUtYzkzMy00NGEwLThmNWUtZTA0YzA2ZDgzNmM4IiwKICAgICAgICAibmFtZSIgOiAiRGVmYXVsdCBQZXJtaXNzaW9uIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkEgcGVybWlzc2lvbiB0aGF0IGFwcGxpZXMgdG8gdGhlIGRlZmF1bHQgcmVzb3VyY2UgdHlwZSIsCiAgICAgICAgInR5cGUiIDogInJlc291cmNlIiwKICAgICAgICAibG9naWMiIDogIlBPU0lUSVZFIiwKICAgICAgICAiZGVjaXNpb25TdHJhdGVneSIgOiAiVU5BTklNT1VTIiwKICAgICAgICAiY29uZmlnIiA6IHsKICAgICAgICAgICJkZWZhdWx0UmVzb3VyY2VUeXBlIiA6ICJ1cm46cGFtLWNsaWVudC1zZXJ2aWNlOnJlc291cmNlczpkZWZhdWx0IiwKICAgICAgICAgICJhcHBseVBvbGljaWVzIiA6ICJbXCJEZWZhdWx0IFBvbGljeVwiXSIKICAgICAgICB9CiAgICAgIH0gXSwKICAgICAgInNjb3BlcyIgOiBbIF0sCiAgICAgICJkZWNpc2lvblN0cmF0ZWd5IiA6ICJVTkFOSU1PVVMiCiAgICB9CiAgfSwgewogICAgImlkIiA6ICJmNmNiYTA4Yy1kYTY0LTQ2MjItYjRhMi0wMWE3NGQwNDZlOWQiLAogICAgImNsaWVudElkIiA6ICJzZWN1cmVkLWV4YW1wbGUtZW5kcG9pbnQiLAogICAgImRlc2NyaXB0aW9uIiA6ICJBIHNlY3VyZWQgRXhhbXBsZSBSRVNUIGVuZHBvaW50IHJlcXVpcmluZyBleGFtcGxlLWFkbWluIHJvbGUgZm9yIGFjY2VzcyIsCiAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIiA6IGZhbHNlLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJhbHdheXNEaXNwbGF5SW5Db25zb2xlIiA6IGZhbHNlLAogICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIiA6ICJjbGllbnQtc2VjcmV0IiwKICAgICJzZWNyZXQiIDogIjIxZmNkNGMxLThmN2YtNDIwZS04MjdiLTE4YjI3NDE4ZGM2ZiIsCiAgICAicmVkaXJlY3RVcmlzIiA6IFsgIioiIF0sCiAgICAid2ViT3JpZ2lucyIgOiBbICIqIiBdLAogICAgIm5vdEJlZm9yZSIgOiAwLAogICAgImJlYXJlck9ubHkiIDogdHJ1ZSwKICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAic3RhbmRhcmRGbG93RW5hYmxlZCIgOiB0cnVlLAogICAgImltcGxpY2l0Rmxvd0VuYWJsZWQiIDogZmFsc2UsCiAgICAiZGlyZWN0QWNjZXNzR3JhbnRzRW5hYmxlZCIgOiB0cnVlLAogICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiIDogZmFsc2UsCiAgICAicHVibGljQ2xpZW50IiA6IGZhbHNlLAogICAgImZyb250Y2hhbm5lbExvZ291dCIgOiBmYWxzZSwKICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgImF0dHJpYnV0ZXMiIDogewogICAgICAic2FtbC5hc3NlcnRpb24uc2lnbmF0dXJlIiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLmZvcmNlLnBvc3QuYmluZGluZyIgOiAiZmFsc2UiLAogICAgICAic2FtbC5tdWx0aXZhbHVlZC5yb2xlcyIgOiAiZmFsc2UiLAogICAgICAic2FtbC5lbmNyeXB0IiA6ICJmYWxzZSIsCiAgICAgICJzYW1sX2ZvcmNlX25hbWVfaWRfZm9ybWF0IiA6ICJmYWxzZSIsCiAgICAgICJzYW1sLmNsaWVudC5zaWduYXR1cmUiIDogImZhbHNlIiwKICAgICAgInNhbWwuYXV0aG5zdGF0ZW1lbnQiIDogImZhbHNlIiwKICAgICAgInNhbWwuc2VydmVyLnNpZ25hdHVyZSIgOiAiZmFsc2UiLAogICAgICAic2FtbC5zZXJ2ZXIuc2lnbmF0dXJlLmtleWluZm8uZXh0IiA6ICJmYWxzZSIKICAgIH0sCiAgICAiYXV0aGVudGljYXRpb25GbG93QmluZGluZ092ZXJyaWRlcyIgOiB7IH0sCiAgICAiZnVsbFNjb3BlQWxsb3dlZCIgOiB0cnVlLAogICAgIm5vZGVSZVJlZ2lzdHJhdGlvblRpbWVvdXQiIDogLTEsCiAgICAicHJvdG9jb2xNYXBwZXJzIiA6IFsgewogICAgICAiaWQiIDogIjY4NGI4NzQ5LTQ4YmYtNDIwNi1hNWM2LTkwNWJkYzU0MmRlZCIsCiAgICAgICJuYW1lIiA6ICJmdWxsIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjI3MzdjYTE4LTM0ZmQtNDQxMS1iY2JlLTg2ZGQ3ODMzYWZlNCIsCiAgICAgICJuYW1lIiA6ICJlbWFpbCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJlbWFpbCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZW1haWwiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiY2M4Y2U2NDEtNWJhMS00YTYxLTljNmMtZDRmYzc4YzlmNTk3IiwKICAgICAgIm5hbWUiIDogInVzZXJuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogInVzZXJuYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiNTg3MDYxN2QtOTZjOS00YTg3LWFjMGEtYTVjYWJhYzE4M2E0IiwKICAgICAgIm5hbWUiIDogImZhbWlseSBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImxhc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJmYW1pbHlfbmFtZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI5YzA3YWY2NC1lMWQxLTRiODUtODhmZC1kZmEwMmUwZjgwMmIiLAogICAgICAibmFtZSIgOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJmaXJzdE5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImdpdmVuX25hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiZDU3ZTczODYtNmE1MC00YmYyLWJiYjMtMzY3OGRiM2YzYjVmIiwKICAgICAgIm5hbWUiIDogInJvbGUgbGlzdCIsCiAgICAgICJwcm90b2NvbCIgOiAic2FtbCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInNpbmdsZSIgOiAiZmFsc2UiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCIgOiAiQmFzaWMiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZSIgOiAiUm9sZSIKICAgICAgfQogICAgfSBdLAogICAgImRlZmF1bHRDbGllbnRTY29wZXMiIDogWyAid2ViLW9yaWdpbnMiLCAicm9sZV9saXN0IiwgInByb2ZpbGUiLCAicm9sZXMiLCAiZW1haWwiIF0sCiAgICAib3B0aW9uYWxDbGllbnRTY29wZXMiIDogWyAiYWRkcmVzcyIsICJwaG9uZSIsICJvZmZsaW5lX2FjY2VzcyIgXQogIH0sIHsKICAgICJpZCIgOiAiMWU0NjJiZjUtZDE5NC00MDBmLTg2NzctNjQyOGIzYzQ3NGVlIiwKICAgICJjbGllbnRJZCIgOiAic2VjdXJpdHktYWRtaW4tY29uc29sZSIsCiAgICAibmFtZSIgOiAiJHtjbGllbnRfc2VjdXJpdHktYWRtaW4tY29uc29sZX0iLAogICAgInJvb3RVcmwiIDogIiR7YXV0aEFkbWluVXJsfSIsCiAgICAiYmFzZVVybCIgOiAiL2FkbWluL21hc3Rlci9jb25zb2xlLyIsCiAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIiA6IGZhbHNlLAogICAgImVuYWJsZWQiIDogdHJ1ZSwKICAgICJhbHdheXNEaXNwbGF5SW5Db25zb2xlIiA6IGZhbHNlLAogICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIiA6ICJjbGllbnQtc2VjcmV0IiwKICAgICJzZWNyZXQiIDogIjBmYTQ5MmM1LTI2MmUtNGUxNS1hYjZjLTk0MzEwOWRjOWMzNCIsCiAgICAicmVkaXJlY3RVcmlzIiA6IFsgIi9hZG1pbi9tYXN0ZXIvY29uc29sZS8qIiBdLAogICAgIndlYk9yaWdpbnMiIDogWyAiKyIgXSwKICAgICJub3RCZWZvcmUiIDogMCwKICAgICJiZWFyZXJPbmx5IiA6IGZhbHNlLAogICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIiA6IHRydWUsCiAgICAiaW1wbGljaXRGbG93RW5hYmxlZCIgOiBmYWxzZSwKICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIiA6IGZhbHNlLAogICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiIDogZmFsc2UsCiAgICAicHVibGljQ2xpZW50IiA6IHRydWUsCiAgICAiZnJvbnRjaGFubmVsTG9nb3V0IiA6IGZhbHNlLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7CiAgICAgICJwa2NlLmNvZGUuY2hhbGxlbmdlLm1ldGhvZCIgOiAiUzI1NiIKICAgIH0sCiAgICAiYXV0aGVudGljYXRpb25GbG93QmluZGluZ092ZXJyaWRlcyIgOiB7IH0sCiAgICAiZnVsbFNjb3BlQWxsb3dlZCIgOiBmYWxzZSwKICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IiA6IDAsCiAgICAicHJvdG9jb2xNYXBwZXJzIiA6IFsgewogICAgICAiaWQiIDogIjI3ZDc3N2NiLThhMDItNDA4MS1hM2NjLTA0YTIwOWUxYTJhYyIsCiAgICAgICJuYW1lIiA6ICJlbWFpbCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJlbWFpbCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZW1haWwiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiOGI3YzJkMWQtNjhjYS00YzRhLThkYWUtYmYxNzllNGMzYjE4IiwKICAgICAgIm5hbWUiIDogImZhbWlseSBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImxhc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJmYW1pbHlfbmFtZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICIwOGQ4MDJiNy1kNGFiLTQ5ZTItOGI4MS1kYmY5NGFiZTFjZDYiLAogICAgICAibmFtZSIgOiAiZnVsbCBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy1mdWxsLW5hbWUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI3ZWY0M2Y3Yy02Nzg1LTQwYTUtODY5OS05ODY0NmE2NWRlNGYiLAogICAgICAibmFtZSIgOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJmaXJzdE5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImdpdmVuX25hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiMTQ3NjliYTYtZWZmZC00ODRiLWFhZTYtNmVjYWNhY2I0MjUzIiwKICAgICAgIm5hbWUiIDogInJvbGUgbGlzdCIsCiAgICAgICJwcm90b2NvbCIgOiAic2FtbCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInNpbmdsZSIgOiAiZmFsc2UiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCIgOiAiQmFzaWMiLAogICAgICAgICJhdHRyaWJ1dGUubmFtZSIgOiAiUm9sZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjU5YTE5ZjA1LTc4OWYtNDNkMC05YTY5LTBhNGMwMGUwNmE0ZCIsCiAgICAgICJuYW1lIiA6ICJ1c2VybmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJ1c2VybmFtZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAicHJlZmVycmVkX3VzZXJuYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImEzNTM5MTdkLTIyMDUtNDIzMC05YzU2LTY1M2YzNTM2ZTkzOSIsCiAgICAgICJuYW1lIiA6ICJsb2NhbGUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1hdHRyaWJ1dGUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImxvY2FsZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAibG9jYWxlIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSBdLAogICAgImRlZmF1bHRDbGllbnRTY29wZXMiIDogWyAid2ViLW9yaWdpbnMiLCAicm9sZV9saXN0IiwgInByb2ZpbGUiLCAicm9sZXMiLCAiZW1haWwiIF0sCiAgICAib3B0aW9uYWxDbGllbnRTY29wZXMiIDogWyAiYWRkcmVzcyIsICJwaG9uZSIsICJvZmZsaW5lX2FjY2VzcyIsICJtaWNyb3Byb2ZpbGUtand0IiBdCiAgfSBdLAogICJjbGllbnRTY29wZXMiIDogWyB7CiAgICAiaWQiIDogIjUwYzEyZWZhLTBhN2MtNGIyMy1iNDY0LWU5OTZhZmU0OWJlNSIsCiAgICAibmFtZSIgOiAibWljcm9wcm9maWxlLWp3dCIsCiAgICAiZGVzY3JpcHRpb24iIDogIk1pY3JvcHJvZmlsZSAtIEpXVCBidWlsdC1pbiBzY29wZSIsCiAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICJhdHRyaWJ1dGVzIiA6IHsKICAgICAgImluY2x1ZGUuaW4udG9rZW4uc2NvcGUiIDogInRydWUiLAogICAgICAiZGlzcGxheS5vbi5jb25zZW50LnNjcmVlbiIgOiAiZmFsc2UiCiAgICB9LAogICAgInByb3RvY29sTWFwcGVycyIgOiBbIHsKICAgICAgImlkIiA6ICI4MDhlZmZiOS1iZTgyLTRkNDktOTM0Ni00NGM0MzM0ZTIzMGMiLAogICAgICAibmFtZSIgOiAidXBuIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogInVzZXJuYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJ1cG4iLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiN2FjMGI0ZGUtODZjOC00NGNlLWEwYTUtYjUwNjQ2YTI5ZTNkIiwKICAgICAgIm5hbWUiIDogImdyb3VwcyIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXJlYWxtLXJvbGUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgIm11bHRpdmFsdWVkIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImZvbyIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiZ3JvdXBzIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICJlN2RiMjczYy05YTNlLTQ3ZmEtODY0Zi02YTA1ODE3ZDk1YjciLAogICAgIm5hbWUiIDogIndlYi1vcmlnaW5zIiwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3BlbklEIENvbm5lY3Qgc2NvcGUgZm9yIGFkZCBhbGxvd2VkIHdlYiBvcmlnaW5zIHRvIHRoZSBhY2Nlc3MgdG9rZW4iLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7CiAgICAgICJpbmNsdWRlLmluLnRva2VuLnNjb3BlIiA6ICJmYWxzZSIsCiAgICAgICJkaXNwbGF5Lm9uLmNvbnNlbnQuc2NyZWVuIiA6ICJmYWxzZSIsCiAgICAgICJjb25zZW50LnNjcmVlbi50ZXh0IiA6ICIiCiAgICB9LAogICAgInByb3RvY29sTWFwcGVycyIgOiBbIHsKICAgICAgImlkIiA6ICI2ZTA5ZTkzYS1mMzhjLTQzZGMtODcyNi1hYThkMDNhMjA2ZjciLAogICAgICAibmFtZSIgOiAiYWxsb3dlZCB3ZWIgb3JpZ2lucyIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtYWxsb3dlZC1vcmlnaW5zLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogeyB9CiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjU2N2Y2MmU2LWIxZWUtNDAxYS05OWIzLWJhMDliYWQ3ZmZhOCIsCiAgICAibmFtZSIgOiAicm9sZXMiLAogICAgImRlc2NyaXB0aW9uIiA6ICJPcGVuSUQgQ29ubmVjdCBzY29wZSBmb3IgYWRkIHVzZXIgcm9sZXMgdG8gdGhlIGFjY2VzcyB0b2tlbiIsCiAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICJhdHRyaWJ1dGVzIiA6IHsKICAgICAgImluY2x1ZGUuaW4udG9rZW4uc2NvcGUiIDogImZhbHNlIiwKICAgICAgImRpc3BsYXkub24uY29uc2VudC5zY3JlZW4iIDogInRydWUiLAogICAgICAiY29uc2VudC5zY3JlZW4udGV4dCIgOiAiJHtyb2xlc1Njb3BlQ29uc2VudFRleHR9IgogICAgfSwKICAgICJwcm90b2NvbE1hcHBlcnMiIDogWyB7CiAgICAgICJpZCIgOiAiNjlkZTkzYjgtZmY2ZC00MTcyLWIzNmQtNTFkYmY3M2JmMDM5IiwKICAgICAgIm5hbWUiIDogImNsaWVudCByb2xlcyIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLWNsaWVudC1yb2xlLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZm9vIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAicmVzb3VyY2VfYWNjZXNzLiR7Y2xpZW50X2lkfS5yb2xlcyIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciLAogICAgICAgICJtdWx0aXZhbHVlZCIgOiAidHJ1ZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjFjZWM2ODBmLTRmNjItNGZiMi04NDU5LWM3NTIzZTQyOTZlZCIsCiAgICAgICJuYW1lIiA6ICJhdWRpZW5jZSByZXNvbHZlIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy1hdWRpZW5jZS1yZXNvbHZlLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogeyB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiYmJiMmE4NTUtMjJkZS00ZThkLWI1MjAtZDhjYTMxZDZjN2Y0IiwKICAgICAgIm5hbWUiIDogInJlYWxtIHJvbGVzIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcmVhbG0tcm9sZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImZvbyIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogInJlYWxtX2FjY2Vzcy5yb2xlcyIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciLAogICAgICAgICJtdWx0aXZhbHVlZCIgOiAidHJ1ZSIKICAgICAgfQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICJlZDQ0Y2Y2Zi1hNTI1LTQ4NzEtOTUyNi1mZDJjNWE0Yzk3OWYiLAogICAgIm5hbWUiIDogInBob25lIiwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3BlbklEIENvbm5lY3QgYnVpbHQtaW4gc2NvcGU6IHBob25lIiwKICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgImF0dHJpYnV0ZXMiIDogewogICAgICAiaW5jbHVkZS5pbi50b2tlbi5zY29wZSIgOiAidHJ1ZSIsCiAgICAgICJkaXNwbGF5Lm9uLmNvbnNlbnQuc2NyZWVuIiA6ICJ0cnVlIiwKICAgICAgImNvbnNlbnQuc2NyZWVuLnRleHQiIDogIiR7cGhvbmVTY29wZUNvbnNlbnRUZXh0fSIKICAgIH0sCiAgICAicHJvdG9jb2xNYXBwZXJzIiA6IFsgewogICAgICAiaWQiIDogIjkxNzY3MjhkLWQyNjAtNDRlNC05ZjdjLWU2ZmNjMzJhZjI4NiIsCiAgICAgICJuYW1lIiA6ICJwaG9uZSBudW1iZXIgdmVyaWZpZWQiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1hdHRyaWJ1dGUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogInBob25lTnVtYmVyVmVyaWZpZWQiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogInBob25lX251bWJlcl92ZXJpZmllZCIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJib29sZWFuIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiYTVhYTU1YzctZDFjYi00ZTM0LWJiYzctNTA3MDZiY2U5OGFmIiwKICAgICAgIm5hbWUiIDogInBob25lIG51bWJlciIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLWF0dHJpYnV0ZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAicGhvbmVOdW1iZXIiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogInBob25lX251bWJlciIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0gXQogIH0sIHsKICAgICJpZCIgOiAiOTI5YTliZjItNjdkNy00OTBmLTgwOTgtNTM2MjUwNzI0MmYwIiwKICAgICJuYW1lIiA6ICJhZGRyZXNzIiwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3BlbklEIENvbm5lY3QgYnVpbHQtaW4gc2NvcGU6IGFkZHJlc3MiLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7CiAgICAgICJpbmNsdWRlLmluLnRva2VuLnNjb3BlIiA6ICJ0cnVlIiwKICAgICAgImRpc3BsYXkub24uY29uc2VudC5zY3JlZW4iIDogInRydWUiLAogICAgICAiY29uc2VudC5zY3JlZW4udGV4dCIgOiAiJHthZGRyZXNzU2NvcGVDb25zZW50VGV4dH0iCiAgICB9LAogICAgInByb3RvY29sTWFwcGVycyIgOiBbIHsKICAgICAgImlkIiA6ICI5ZjA2YzQwNC05MzBiLTQxYzEtODY1OC0yMGVjNDEyOTcyYTAiLAogICAgICAibmFtZSIgOiAiYWRkcmVzcyIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtYWRkcmVzcy1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlci5hdHRyaWJ1dGUuZm9ybWF0dGVkIiA6ICJmb3JtYXR0ZWQiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZS5jb3VudHJ5IiA6ICJjb3VudHJ5IiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUucG9zdGFsX2NvZGUiIDogInBvc3RhbF9jb2RlIiwKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZS5zdHJlZXQiIDogInN0cmVldCIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUucmVnaW9uIiA6ICJyZWdpb24iLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZS5sb2NhbGl0eSIgOiAibG9jYWxpdHkiCiAgICAgIH0KICAgIH0gXQogIH0sIHsKICAgICJpZCIgOiAiMzY1OTNhYmEtNWU1NS00MjEyLWEyNGUtODNjMjFjZjk2MjQwIiwKICAgICJuYW1lIiA6ICJlbWFpbCIsCiAgICAiZGVzY3JpcHRpb24iIDogIk9wZW5JRCBDb25uZWN0IGJ1aWx0LWluIHNjb3BlOiBlbWFpbCIsCiAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICJhdHRyaWJ1dGVzIiA6IHsKICAgICAgImluY2x1ZGUuaW4udG9rZW4uc2NvcGUiIDogInRydWUiLAogICAgICAiZGlzcGxheS5vbi5jb25zZW50LnNjcmVlbiIgOiAidHJ1ZSIsCiAgICAgICJjb25zZW50LnNjcmVlbi50ZXh0IiA6ICIke2VtYWlsU2NvcGVDb25zZW50VGV4dH0iCiAgICB9LAogICAgInByb3RvY29sTWFwcGVycyIgOiBbIHsKICAgICAgImlkIiA6ICI1ZmM1ZjBhOS03NmE3LTRhZGItOWVhOS0wOGU2NmFhZTU0MWUiLAogICAgICAibmFtZSIgOiAiZW1haWwiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZW1haWwiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImVtYWlsIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjQzZTRiOTgyLTY0ZGUtNGNkYy1iNGI3LWFhYWQyYjFkNWFhZCIsCiAgICAgICJuYW1lIiA6ICJlbWFpbCB2ZXJpZmllZCIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJlbWFpbFZlcmlmaWVkIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJlbWFpbF92ZXJpZmllZCIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJib29sZWFuIgogICAgICB9CiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjM5ZjcwYzVkLTcwNmYtNGIxOC1iNTg3LWM0ZGRmNjRjNzZjNSIsCiAgICAibmFtZSIgOiAicHJvZmlsZSIsCiAgICAiZGVzY3JpcHRpb24iIDogIk9wZW5JRCBDb25uZWN0IGJ1aWx0LWluIHNjb3BlOiBwcm9maWxlIiwKICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgImF0dHJpYnV0ZXMiIDogewogICAgICAiaW5jbHVkZS5pbi50b2tlbi5zY29wZSIgOiAidHJ1ZSIsCiAgICAgICJkaXNwbGF5Lm9uLmNvbnNlbnQuc2NyZWVuIiA6ICJ0cnVlIiwKICAgICAgImNvbnNlbnQuc2NyZWVuLnRleHQiIDogIiR7cHJvZmlsZVNjb3BlQ29uc2VudFRleHR9IgogICAgfSwKICAgICJwcm90b2NvbE1hcHBlcnMiIDogWyB7CiAgICAgICJpZCIgOiAiYjVmYjFmMzYtODJlNC00MGE3LTlhNzItNjE3OTlhMGZiMGM0IiwKICAgICAgIm5hbWUiIDogInVzZXJuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogInVzZXJuYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiZDc5MTBiM2MtZjYxZS00NmYxLWFkZTQtYTU3Y2I2ZjM1ZTEzIiwKICAgICAgIm5hbWUiIDogImdlbmRlciIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLWF0dHJpYnV0ZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZ2VuZGVyIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJnZW5kZXIiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiZjBiZWYzM2ItMGIxYS00ZjNiLThmN2QtNjkwY2ViY2VhNzIxIiwKICAgICAgIm5hbWUiIDogIm1pZGRsZSBuYW1lIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtYXR0cmlidXRlLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJtaWRkbGVOYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJtaWRkbGVfbmFtZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI2MTQwMjRkMy1hMmE2LTRlNjMtYTY4OS1jNjg5NzZlYTk5MjUiLAogICAgICAibmFtZSIgOiAicGljdHVyZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLWF0dHJpYnV0ZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAicGljdHVyZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAicGljdHVyZSIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICJlZDk1OTU5ZS1hYWVmLTRkZDItOGNhMi0wMDE2OTI1NGIzMzgiLAogICAgICAibmFtZSIgOiAiem9uZWluZm8iLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1hdHRyaWJ1dGUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogInpvbmVpbmZvIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJ6b25laW5mbyIsCiAgICAgICAgImpzb25UeXBlLmxhYmVsIiA6ICJTdHJpbmciCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI5MDFjYjgwMS0xNjZlLTQ2MmMtYTQ3Ny02ZjYyNjQ4ZDczNzkiLAogICAgICAibmFtZSIgOiAiZmFtaWx5IG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAibGFzdE5hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogImZhbWlseV9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImQwYzI5M2YzLTlkZmMtNGNmMi05MDBhLTM1ZDU4NWI4MGE5ZiIsCiAgICAgICJuYW1lIiA6ICJwcm9maWxlIiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtYXR0cmlidXRlLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJwcm9maWxlIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJwcm9maWxlIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjcyZjgyNmMzLWJmOGYtNDUyMy1iOGQ3LWMzNzBmY2I4ZTU2NiIsCiAgICAgICJuYW1lIiA6ICJ1cGRhdGVkIGF0IiwKICAgICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICJwcm90b2NvbE1hcHBlciIgOiAib2lkYy11c2VybW9kZWwtYXR0cmlidXRlLW1hcHBlciIsCiAgICAgICJjb25zZW50UmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICJjb25maWciIDogewogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgInVzZXIuYXR0cmlidXRlIiA6ICJ1cGRhdGVkQXQiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogInVwZGF0ZWRfYXQiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiMDVjNGY3YTQtNTZhMi00NGYzLTgyZWMtMDZjZDdjMmFmN2YzIiwKICAgICAgIm5hbWUiIDogIndlYnNpdGUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1hdHRyaWJ1dGUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogIndlYnNpdGUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogIndlYnNpdGUiLAogICAgICAgICJqc29uVHlwZS5sYWJlbCIgOiAiU3RyaW5nIgogICAgICB9CiAgICB9LCB7CiAgICAgICJpZCIgOiAiNjNhYjZkOWQtZjAzNC00ZTUyLWFmODYtMDU4ZTRjN2FmMGQ5IiwKICAgICAgIm5hbWUiIDogImdpdmVuIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAiZmlyc3ROYW1lIiwKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJjbGFpbS5uYW1lIiA6ICJnaXZlbl9uYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjgwOTA4Y2YxLTU3Y2EtNDFiMC05MjJiLTI4MjkxODNjOGY1NiIsCiAgICAgICJuYW1lIiA6ICJiaXJ0aGRhdGUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1hdHRyaWJ1dGUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImJpcnRoZGF0ZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAiYmlydGhkYXRlIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjAzNWQwODg4LTJiZmUtNGJjNC1hNGVjLTJiODI5ZjRjZWI0NyIsCiAgICAgICJuYW1lIiA6ICJmdWxsIG5hbWUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAiaWQudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSIgOiAidHJ1ZSIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjM4OTRlZWMxLTQ3NjAtNGFiMC1iYzExLWUzYTNhYzE0YjhiOCIsCiAgICAgICJuYW1lIiA6ICJuaWNrbmFtZSIsCiAgICAgICJwcm90b2NvbCIgOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAicHJvdG9jb2xNYXBwZXIiIDogIm9pZGMtdXNlcm1vZGVsLWF0dHJpYnV0ZS1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iIDogInRydWUiLAogICAgICAgICJ1c2VyLmF0dHJpYnV0ZSIgOiAibmlja25hbWUiLAogICAgICAgICJpZC50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSIgOiAidHJ1ZSIsCiAgICAgICAgImNsYWltLm5hbWUiIDogIm5pY2tuYW1lIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjYxODMwYzQ4LWQ1ZmUtNDMyYy1hMTJjLWRhMDhkYTVlNTg5MCIsCiAgICAgICJuYW1lIiA6ICJsb2NhbGUiLAogICAgICAicHJvdG9jb2wiIDogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJvaWRjLXVzZXJtb2RlbC1hdHRyaWJ1dGUtbWFwcGVyIiwKICAgICAgImNvbnNlbnRSZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAidXNlci5hdHRyaWJ1dGUiIDogImxvY2FsZSIsCiAgICAgICAgImlkLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIiA6ICJ0cnVlIiwKICAgICAgICAiY2xhaW0ubmFtZSIgOiAibG9jYWxlIiwKICAgICAgICAianNvblR5cGUubGFiZWwiIDogIlN0cmluZyIKICAgICAgfQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICI4OTdkMzhjMC1hMWNhLTRmMzctOGRkYy04N2MwNDA5YTQzZDYiLAogICAgIm5hbWUiIDogInJvbGVfbGlzdCIsCiAgICAiZGVzY3JpcHRpb24iIDogIlNBTUwgcm9sZSBsaXN0IiwKICAgICJwcm90b2NvbCIgOiAic2FtbCIsCiAgICAiYXR0cmlidXRlcyIgOiB7CiAgICAgICJjb25zZW50LnNjcmVlbi50ZXh0IiA6ICIke3NhbWxSb2xlTGlzdFNjb3BlQ29uc2VudFRleHR9IiwKICAgICAgImRpc3BsYXkub24uY29uc2VudC5zY3JlZW4iIDogInRydWUiCiAgICB9LAogICAgInByb3RvY29sTWFwcGVycyIgOiBbIHsKICAgICAgImlkIiA6ICJkNmRmNjk3Ny02YmMxLTQ5ZDUtODM1Ny1mYThjOWUyZGNkZTAiLAogICAgICAibmFtZSIgOiAicm9sZSBsaXN0IiwKICAgICAgInByb3RvY29sIiA6ICJzYW1sIiwKICAgICAgInByb3RvY29sTWFwcGVyIiA6ICJzYW1sLXJvbGUtbGlzdC1tYXBwZXIiLAogICAgICAiY29uc2VudFJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAic2luZ2xlIiA6ICJmYWxzZSIsCiAgICAgICAgImF0dHJpYnV0ZS5uYW1lZm9ybWF0IiA6ICJCYXNpYyIsCiAgICAgICAgImF0dHJpYnV0ZS5uYW1lIiA6ICJSb2xlIgogICAgICB9CiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjMyZWZjYzA2LWNlYTYtNGM3ZS04YTk4LWM4M2I3ODg2NGQwNiIsCiAgICAibmFtZSIgOiAib2ZmbGluZV9hY2Nlc3MiLAogICAgImRlc2NyaXB0aW9uIiA6ICJPcGVuSUQgQ29ubmVjdCBidWlsdC1pbiBzY29wZTogb2ZmbGluZV9hY2Nlc3MiLAogICAgInByb3RvY29sIiA6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAiYXR0cmlidXRlcyIgOiB7CiAgICAgICJjb25zZW50LnNjcmVlbi50ZXh0IiA6ICIke29mZmxpbmVBY2Nlc3NTY29wZUNvbnNlbnRUZXh0fSIsCiAgICAgICJkaXNwbGF5Lm9uLmNvbnNlbnQuc2NyZWVuIiA6ICJ0cnVlIgogICAgfQogIH0gXSwKICAiZGVmYXVsdERlZmF1bHRDbGllbnRTY29wZXMiIDogWyAicm9sZV9saXN0IiwgInByb2ZpbGUiLCAiZW1haWwiLCAicm9sZXMiLCAid2ViLW9yaWdpbnMiIF0sCiAgImRlZmF1bHRPcHRpb25hbENsaWVudFNjb3BlcyIgOiBbICJvZmZsaW5lX2FjY2VzcyIsICJhZGRyZXNzIiwgInBob25lIiwgIm1pY3JvcHJvZmlsZS1qd3QiIF0sCiAgImJyb3dzZXJTZWN1cml0eUhlYWRlcnMiIDogewogICAgImNvbnRlbnRTZWN1cml0eVBvbGljeVJlcG9ydE9ubHkiIDogIiIsCiAgICAieENvbnRlbnRUeXBlT3B0aW9ucyIgOiAibm9zbmlmZiIsCiAgICAieFJvYm90c1RhZyIgOiAibm9uZSIsCiAgICAieEZyYW1lT3B0aW9ucyIgOiAiU0FNRU9SSUdJTiIsCiAgICAieFhTU1Byb3RlY3Rpb24iIDogIjE7IG1vZGU9YmxvY2siLAogICAgImNvbnRlbnRTZWN1cml0eVBvbGljeSIgOiAiZnJhbWUtc3JjICdzZWxmJzsgZnJhbWUtYW5jZXN0b3JzICdzZWxmJzsgb2JqZWN0LXNyYyAnbm9uZSc7IiwKICAgICJzdHJpY3RUcmFuc3BvcnRTZWN1cml0eSIgOiAibWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnMiCiAgfSwKICAic210cFNlcnZlciIgOiB7IH0sCiAgImV2ZW50c0VuYWJsZWQiIDogZmFsc2UsCiAgImV2ZW50c0xpc3RlbmVycyIgOiBbICJqYm9zcy1sb2dnaW5nIiBdLAogICJlbmFibGVkRXZlbnRUeXBlcyIgOiBbIF0sCiAgImFkbWluRXZlbnRzRW5hYmxlZCIgOiBmYWxzZSwKICAiYWRtaW5FdmVudHNEZXRhaWxzRW5hYmxlZCIgOiBmYWxzZSwKICAiY29tcG9uZW50cyIgOiB7CiAgICAib3JnLmtleWNsb2FrLnNlcnZpY2VzLmNsaWVudHJlZ2lzdHJhdGlvbi5wb2xpY3kuQ2xpZW50UmVnaXN0cmF0aW9uUG9saWN5IiA6IFsgewogICAgICAiaWQiIDogImQ5OTc3NjBiLWJlYjUtNGEzMi1iMjFiLWI1NWVlMzZhNzNiMCIsCiAgICAgICJuYW1lIiA6ICJBbGxvd2VkIFByb3RvY29sIE1hcHBlciBUeXBlcyIsCiAgICAgICJwcm92aWRlcklkIiA6ICJhbGxvd2VkLXByb3RvY29sLW1hcHBlcnMiLAogICAgICAic3ViVHlwZSIgOiAiYXV0aGVudGljYXRlZCIsCiAgICAgICJzdWJDb21wb25lbnRzIiA6IHsgfSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImFsbG93ZWQtcHJvdG9jb2wtbWFwcGVyLXR5cGVzIiA6IFsgIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsICJzYW1sLXVzZXItcHJvcGVydHktbWFwcGVyIiwgIm9pZGMtdXNlcm1vZGVsLWF0dHJpYnV0ZS1tYXBwZXIiLCAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwgIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsICJvaWRjLXNoYTI1Ni1wYWlyd2lzZS1zdWItbWFwcGVyIiwgIm9pZGMtYWRkcmVzcy1tYXBwZXIiLCAic2FtbC11c2VyLWF0dHJpYnV0ZS1tYXBwZXIiIF0KICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjk0MDg3YWQ4LTdkOGUtNDNkNS1iYWIyLThiMTdmMDhmMGE4NSIsCiAgICAgICJuYW1lIiA6ICJBbGxvd2VkIENsaWVudCBTY29wZXMiLAogICAgICAicHJvdmlkZXJJZCIgOiAiYWxsb3dlZC1jbGllbnQtdGVtcGxhdGVzIiwKICAgICAgInN1YlR5cGUiIDogImFub255bW91cyIsCiAgICAgICJzdWJDb21wb25lbnRzIiA6IHsgfSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImFsbG93LWRlZmF1bHQtc2NvcGVzIiA6IFsgInRydWUiIF0KICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjg0NjBiOTc4LTg4NWMtNGI0OC04Yzk5LWU0MTVlYTRiMDIzZSIsCiAgICAgICJuYW1lIiA6ICJGdWxsIFNjb3BlIERpc2FibGVkIiwKICAgICAgInByb3ZpZGVySWQiIDogInNjb3BlIiwKICAgICAgInN1YlR5cGUiIDogImFub255bW91cyIsCiAgICAgICJzdWJDb21wb25lbnRzIiA6IHsgfSwKICAgICAgImNvbmZpZyIgOiB7IH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI5ZTkwMjZhNC1jZDE4LTRjOGItOTBjMi1hMDU5ZjYyNmVjMzEiLAogICAgICAibmFtZSIgOiAiQWxsb3dlZCBQcm90b2NvbCBNYXBwZXIgVHlwZXMiLAogICAgICAicHJvdmlkZXJJZCIgOiAiYWxsb3dlZC1wcm90b2NvbC1tYXBwZXJzIiwKICAgICAgInN1YlR5cGUiIDogImFub255bW91cyIsCiAgICAgICJzdWJDb21wb25lbnRzIiA6IHsgfSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImFsbG93ZWQtcHJvdG9jb2wtbWFwcGVyLXR5cGVzIiA6IFsgInNhbWwtcm9sZS1saXN0LW1hcHBlciIsICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLCAic2FtbC11c2VyLXByb3BlcnR5LW1hcHBlciIsICJvaWRjLXVzZXJtb2RlbC1hdHRyaWJ1dGUtbWFwcGVyIiwgIm9pZGMtYWRkcmVzcy1tYXBwZXIiLCAic2FtbC11c2VyLWF0dHJpYnV0ZS1tYXBwZXIiLCAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwgIm9pZGMtc2hhMjU2LXBhaXJ3aXNlLXN1Yi1tYXBwZXIiIF0KICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImEwMGE2OGE5LTlmODAtNGM4Ni1iZTdiLTJhMDU3OWI2NmRlZCIsCiAgICAgICJuYW1lIiA6ICJBbGxvd2VkIENsaWVudCBTY29wZXMiLAogICAgICAicHJvdmlkZXJJZCIgOiAiYWxsb3dlZC1jbGllbnQtdGVtcGxhdGVzIiwKICAgICAgInN1YlR5cGUiIDogImF1dGhlbnRpY2F0ZWQiLAogICAgICAic3ViQ29tcG9uZW50cyIgOiB7IH0sCiAgICAgICJjb25maWciIDogewogICAgICAgICJhbGxvdy1kZWZhdWx0LXNjb3BlcyIgOiBbICJ0cnVlIiBdCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICI1NWUyZGRmYS1hYjM2LTRjOTItOGE1MS0wM2JjNDdkNGJjZDkiLAogICAgICAibmFtZSIgOiAiTWF4IENsaWVudHMgTGltaXQiLAogICAgICAicHJvdmlkZXJJZCIgOiAibWF4LWNsaWVudHMiLAogICAgICAic3ViVHlwZSIgOiAiYW5vbnltb3VzIiwKICAgICAgInN1YkNvbXBvbmVudHMiIDogeyB9LAogICAgICAiY29uZmlnIiA6IHsKICAgICAgICAibWF4LWNsaWVudHMiIDogWyAiMjAwIiBdCiAgICAgIH0KICAgIH0sIHsKICAgICAgImlkIiA6ICJjNTQ1Y2E3YS02ZjQyLTQ3NzgtOGE3NS04ZDAxOWM4ZmVhMTQiLAogICAgICAibmFtZSIgOiAiQ29uc2VudCBSZXF1aXJlZCIsCiAgICAgICJwcm92aWRlcklkIiA6ICJjb25zZW50LXJlcXVpcmVkIiwKICAgICAgInN1YlR5cGUiIDogImFub255bW91cyIsCiAgICAgICJzdWJDb21wb25lbnRzIiA6IHsgfSwKICAgICAgImNvbmZpZyIgOiB7IH0KICAgIH0sIHsKICAgICAgImlkIiA6ICJiMThlMWQ4ZS02MzZiLTQ5YmEtODNiZi1hMGZjYWI3YzIyYmQiLAogICAgICAibmFtZSIgOiAiVHJ1c3RlZCBIb3N0cyIsCiAgICAgICJwcm92aWRlcklkIiA6ICJ0cnVzdGVkLWhvc3RzIiwKICAgICAgInN1YlR5cGUiIDogImFub255bW91cyIsCiAgICAgICJzdWJDb21wb25lbnRzIiA6IHsgfSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImhvc3Qtc2VuZGluZy1yZWdpc3RyYXRpb24tcmVxdWVzdC1tdXN0LW1hdGNoIiA6IFsgInRydWUiIF0sCiAgICAgICAgImNsaWVudC11cmlzLW11c3QtbWF0Y2giIDogWyAidHJ1ZSIgXQogICAgICB9CiAgICB9IF0sCiAgICAib3JnLmtleWNsb2FrLmtleXMuS2V5UHJvdmlkZXIiIDogWyB7CiAgICAgICJpZCIgOiAiNDMwZDZjM2UtMTZlOS00OWNlLThjNTgtZTA4ZWFiZDUzNzE3IiwKICAgICAgIm5hbWUiIDogInJzYSIsCiAgICAgICJwcm92aWRlcklkIiA6ICJyc2EiLAogICAgICAic3ViQ29tcG9uZW50cyIgOiB7IH0sCiAgICAgICJjb25maWciIDogewogICAgICAgICJwcml2YXRlS2V5IiA6IFsgIk1JSUVvd0lCQUFLQ0FRRUFvRVRuUG1ONTV4QkpqUnpOL2NzMzBPeko5b2xrdGVMVk5SanpkVHhGT3lSdFMyb3ZEZnpkaGhPOVh6VWNUTWJJc0NPQVp0U3Q4Sys2eXZCWHlwT1NZdkk3NUVVZHlwbWtjSzFLb3B0cVk1S0VCUTFLd2hXdVA3SVdRMGZzaFV3RDZqSTFRV0RmR3hmTS9oMzRGdkVuLzB0SjcxeE4yUDhUSTJZYW53dURaZ29zZG9ieC9QQXZsR1JFQkd1azRCZ21leFRPa0FkbkZ4SVVRY0NraUVaMkM0MXVDcnhpUzRDRWU1T1g5MWFLOUhLWlY0WkpYNnZucU1IbWREbnNNZE8rVUZ0eE9CWVppbythMWpQNFczZDdKNWZHZWlPYVhqUUNPcGl2S25QMnlVMkRQZFdtRE15VmI2N2w4RFJBK2poME9KRktaNUgyZk5nRTNJSTU5dmRzUndJREFRQUJBb0lCQVFDVEgwMXIzeU5yY204aVk5dlE2N2tjU0JJS0NBdjBUL3RLbDlIOXY4c0p4S0cwQmhDVjlaZGhXa09QMzVCUUJuYjZBa3ovbUtMbi9Ga3JyRC9iRFdibS85anM3bW12cnlUZDdxWkI2UXRieG9iOG9Ed05PSnZSaXVpVzhMSjFsdGROS0xQc2hVR3BmRXJJeDdnVFQyTlpIc01MUUorUjRHMndKQzJ4N0g2OXJvcXdLc1FqVUZmV2I4RGZwNHhRKzQzZjk2SVlLd29QNlo3RTBWT2Y3YUlPUzl5blkwQVljYkxHVWR6VThMN044bmpJb3ovSkczWkFEaDVFOWZyQmdqbitLcGE5QnFVdElBTTU0NFJ2WTdHUHFsU1drZDVLNXE5cEM1V2xFWVNnRDB5OHU1aldWMzF6NndPNWtjSnlKU3ZpTjVMMlQ4dTJWd0JGckx1ME5UMzVBb0dCQU5aaXVqWVkrRXZacEE5NXNGTFd0TlFlYmVxSGk2aUsvTERZVkJBdzNjZ2xSM1BwanRwNExCd0xrQ1VqWEV2QmxKa0NEVkR2aUpBR2IxUFNRSUFuUHdtT3MyY1BQaHRWQjVVUFVRL3VKWCs4aEVaNldsSmRBQUNmeXVCdk5WVDZ4bEM4OGNabDhDQVRPQ3Q3cklabjRTb2xrUnR3MFpBanh6Zm1UOWRGdEJsekFvR0JBTDloQTNmSTc5cmlQdGsvZ29qSE54U2NubkNIanFxYmVNMEJBaW1PRGIrN3lnOW90cGNPYkZqWW80amJ1VkFYNVhETXRGZVdqOWhxdmtFMVRHZWpxdk5NWm9zV01oSk5xWHYrREZreEJ1NjRGWGdXemlJQm5iSmhzdEp6dFgvZFMwMGZ5Y2N0QmdRZFVYTWEzcnRHTDdsVGR6MkRWM3lPTTc4UzdyZUp2N3pkQW9HQUo5RTJYSTNPcitmQVBNK1JIQkdjakRrS21TQ0xvOFlNb0p2TklTU3lURllBSzFzWm1TSHdyMVRHZE45WWFRbVBHOHZ4eFRKMzNxZ1RUVElqb0ttcFg1RU5hUHEvd2p2TXFMYXJpNVhqaVJIdVQxaXlKZEg0Q2lXamZJT3JHQmxyYzl0ajNFRmFrOXA5K0RXRUdZSjVvMlpPeVJYdkZpSlBBZWJZdFZiUTJGa0NnWUIzTGtaSG1ZWHRqTW5RNXlFMlpzR2hmMnVYN29ObE1jOEg4K0hSMlJvczFoaWVnZnA3bGNyWmhZaEtHWE9OTW1SN1c2L1BmLzd5cW43ekF1c2krNlRoUVNuMjRncXFwVnl2eitVR3dtWnIwWTNsTEdhUWZPc2xCSHlsWE5PaDNrRWZ0WFVtS1o2K2Z6ZVM5Qi9UQm9GLzZ6K3R1aGFJaGRJcDR2TndyME1OclFLQmdCWVZlMEVScTVnVEdUVjk5d0lrK2o0eTlhVndiL25KdU1vejJPRmRlUnFLLzVQRnpNaWRmODJTQTU2Q09BM1hOZUFJUGJxNEJtLzBhaFl2bU5vbFZRSG5ld1hMSzZuVXhKc0VwUEh0bXpsNFpLM3dNM2tiendjQzNRVVpoaTdOcEtSem1LcW5yVytIaFhMYWNQRHhBTkxCWlBrOHlZaEhDVXJHcTZ2VHVDZm4iIF0sCiAgICAgICAgImNlcnRpZmljYXRlIiA6IFsgIk1JSUNtekNDQVlNQ0JnRmF2LzlOYkRBTkJna3Foa2lHOXcwQkFRc0ZBREFSTVE4d0RRWURWUVFEREFadFlYTjBaWEl3SGhjTk1UY3dNekV5TURBME9USTBXaGNOTWpjd016RXlNREExTVRBMFdqQVJNUTh3RFFZRFZRUUREQVp0WVhOMFpYSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZ1JPYytZM25uRUVtTkhNMzl5emZRN01uMmlXUzE0dFUxR1BOMVBFVTdKRzFMYWk4Ti9OMkdFNzFmTlJ4TXhzaXdJNEJtMUszd3I3cks4RmZLazVKaThqdmtSUjNLbWFSd3JVcWltMnBqa29RRkRVckNGYTQvc2haRFIreUZUQVBxTWpWQllOOGJGOHorSGZnVzhTZi9TMG52WEUzWS94TWpaaHFmQzRObUNpeDJodkg4OEMrVVpFUUVhNlRnR0NaN0ZNNlFCMmNYRWhSQndLU0lSbllMalc0S3ZHSkxnSVI3azVmM1ZvcjBjcGxYaGtsZnErZW93ZVowT2V3eDA3NVFXM0U0RmhtS2o1cldNL2hiZDNzbmw4WjZJNXBlTkFJNm1LOHFjL2JKVFlNOTFhWU16SlZ2cnVYd05FRDZPSFE0a1VwbmtmWjgyQVRjZ2puMjkyeEhBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBK1J1RW9aaU9RR2ZZZlhWVDNkRTZUaDNJTm5SM25TdE51UDVBUXYvY055REJ3QzV5TFVkQkFCRE9VYVBTYjZPV0lZOHB4R3M0NTdGY3QwZ3pRc1B1RTk5WmszR0RmUk5PcWtNQTk1Mk80R2grSGMyN05iellmTG1oUHlUU1RlMW9LQnhvWW1zbUJ3NTdWaXgrck9LYmhMQUh5Vmg1UVhsNGhoYnRydUxkcVA2RU13TDExZVd5a0JDSjFiN2dDdVlqQ0dLcFliTEtwU3RnMnhYbzlyUFRkM05tbVBZbnBDWU5yRXdsNzZQKythNHc5SWNzVW4yRW1CdTBQM25qWWd0eFd1Y1RxOUxENUkwaDR1b2tuWkVpckVSa1gxMVNqUW5UemFucHE4bktwaFJWMFJkR25XV1NFTjQzOEhsMVhSNHpyU1JsQ2xGbE4zTWNGNEM0VTRNVkU9IiBdLAogICAgICAgICJwcmlvcml0eSIgOiBbICIxMDAiIF0KICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogImFhMDhhNzI0LTEwOWYtNDFmYy04YzY1LTQ3OTI0OTAzOTMzMiIsCiAgICAgICJuYW1lIiA6ICJobWFjLWdlbmVyYXRlZCIsCiAgICAgICJwcm92aWRlcklkIiA6ICJobWFjLWdlbmVyYXRlZCIsCiAgICAgICJzdWJDb21wb25lbnRzIiA6IHsgfSwKICAgICAgImNvbmZpZyIgOiB7CiAgICAgICAgImtpZCIgOiBbICIzMGRmMGJlNi1kYmZlLTQwZjYtOWE5Ni02YzkwMzBkZTZkMTAiIF0sCiAgICAgICAgInNlY3JldCIgOiBbICI0WGRwV2FZSGVTWVc3Z0Fha3MxYi1Cbmkta3NZaE45dkh6RWxyRVlNWC1hUDF3bzhCSGxHNjMxREZqUWMxR3hNbzJzd0NNYnVtNy1hRVNjc0hSVE5ZUSIgXSwKICAgICAgICAicHJpb3JpdHkiIDogWyAiMTAwIiBdLAogICAgICAgICJhbGdvcml0aG0iIDogWyAiSFMyNTYiIF0KICAgICAgfQogICAgfSwgewogICAgICAiaWQiIDogIjYyMTNlNzA4LWUxODQtNGFlYS04NDc4LTRiNzZkN2I5ODEyNSIsCiAgICAgICJuYW1lIiA6ICJhZXMtZ2VuZXJhdGVkIiwKICAgICAgInByb3ZpZGVySWQiIDogImFlcy1nZW5lcmF0ZWQiLAogICAgICAic3ViQ29tcG9uZW50cyIgOiB7IH0sCiAgICAgICJjb25maWciIDogewogICAgICAgICJraWQiIDogWyAiZDllMDg1YjAtMTFjNy00N2ZlLWI1ZmEtYjVlNjlmMjc4ZjkwIiBdLAogICAgICAgICJzZWNyZXQiIDogWyAibTdoWmRSZ3RIc0kxa0c1M3dOMzF0QSIgXSwKICAgICAgICAicHJpb3JpdHkiIDogWyAiMTAwIiBdCiAgICAgIH0KICAgIH0gXQogIH0sCiAgImludGVybmF0aW9uYWxpemF0aW9uRW5hYmxlZCIgOiBmYWxzZSwKICAic3VwcG9ydGVkTG9jYWxlcyIgOiBbIF0sCiAgImF1dGhlbnRpY2F0aW9uRmxvd3MiIDogWyB7CiAgICAiaWQiIDogIjc3NGJmNjQzLWIxMTYtNGJmNS04NDYxLTMxYzkzZjAyYThhYSIsCiAgICAiYWxpYXMiIDogIkhhbmRsZSBFeGlzdGluZyBBY2NvdW50IiwKICAgICJkZXNjcmlwdGlvbiIgOiAiSGFuZGxlIHdoYXQgdG8gZG8gaWYgdGhlcmUgaXMgZXhpc3RpbmcgYWNjb3VudCB3aXRoIHNhbWUgZW1haWwvdXNlcm5hbWUgbGlrZSBhdXRoZW50aWNhdGVkIGlkZW50aXR5IHByb3ZpZGVyIiwKICAgICJwcm92aWRlcklkIiA6ICJiYXNpYy1mbG93IiwKICAgICJ0b3BMZXZlbCIgOiBmYWxzZSwKICAgICJidWlsdEluIiA6IHRydWUsCiAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIiA6IFsgewogICAgICAiYXV0aGVudGljYXRvciIgOiAiaWRwLWNvbmZpcm0tbGluayIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiUkVRVUlSRUQiLAogICAgICAicHJpb3JpdHkiIDogMTAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAicmVxdWlyZW1lbnQiIDogIlJFUVVJUkVEIiwKICAgICAgInByaW9yaXR5IiA6IDIwLAogICAgICAiZmxvd0FsaWFzIiA6ICJIYW5kbGUgRXhpc3RpbmcgQWNjb3VudCAtIEFsdGVybmF0aXZlcyAtIDAiLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogdHJ1ZQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICJhYzdiMzIxMS02NWFiLTQxMWUtODk0Zi04ZTAwOTg3OWQ5Y2IiLAogICAgImFsaWFzIiA6ICJIYW5kbGUgRXhpc3RpbmcgQWNjb3VudCAtIEFsdGVybmF0aXZlcyAtIDAiLAogICAgImRlc2NyaXB0aW9uIiA6ICJTdWJmbG93IG9mIEhhbmRsZSBFeGlzdGluZyBBY2NvdW50IHdpdGggYWx0ZXJuYXRpdmUgZXhlY3V0aW9ucyIsCiAgICAicHJvdmlkZXJJZCIgOiAiYmFzaWMtZmxvdyIsCiAgICAidG9wTGV2ZWwiIDogZmFsc2UsCiAgICAiYnVpbHRJbiIgOiB0cnVlLAogICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyIgOiBbIHsKICAgICAgImF1dGhlbnRpY2F0b3IiIDogImlkcC1lbWFpbC12ZXJpZmljYXRpb24iLAogICAgICAicmVxdWlyZW1lbnQiIDogIkFMVEVSTkFUSVZFIiwKICAgICAgInByaW9yaXR5IiA6IDEwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0sIHsKICAgICAgInJlcXVpcmVtZW50IiA6ICJBTFRFUk5BVElWRSIsCiAgICAgICJwcmlvcml0eSIgOiAyMCwKICAgICAgImZsb3dBbGlhcyIgOiAiVmVyaWZ5IEV4aXN0aW5nIEFjY291bnQgYnkgUmUtYXV0aGVudGljYXRpb24iLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogdHJ1ZQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICJkMGUyMGIzNS1lNDE3LTQ0NTItODgyNy1mOWE3M2UxOGYwYjkiLAogICAgImFsaWFzIiA6ICJWZXJpZnkgRXhpc3RpbmcgQWNjb3VudCBieSBSZS1hdXRoZW50aWNhdGlvbiIsCiAgICAiZGVzY3JpcHRpb24iIDogIlJlYXV0aGVudGljYXRpb24gb2YgZXhpc3RpbmcgYWNjb3VudCIsCiAgICAicHJvdmlkZXJJZCIgOiAiYmFzaWMtZmxvdyIsCiAgICAidG9wTGV2ZWwiIDogZmFsc2UsCiAgICAiYnVpbHRJbiIgOiB0cnVlLAogICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyIgOiBbIHsKICAgICAgImF1dGhlbnRpY2F0b3IiIDogImlkcC11c2VybmFtZS1wYXNzd29yZC1mb3JtIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAxMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9LCB7CiAgICAgICJyZXF1aXJlbWVudCIgOiAiQ09ORElUSU9OQUwiLAogICAgICAicHJpb3JpdHkiIDogMjAsCiAgICAgICJmbG93QWxpYXMiIDogIlZlcmlmeSBFeGlzdGluZyBBY2NvdW50IGJ5IFJlLWF1dGhlbnRpY2F0aW9uIC0gYXV0aC1vdHAtZm9ybSAtIENvbmRpdGlvbmFsIiwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IHRydWUKICAgIH0gXQogIH0sIHsKICAgICJpZCIgOiAiMDJmZTZiMWEtNWZjZC00ZjlkLTg0ZWItY2I4Njc4ZjQ4ZDMzIiwKICAgICJhbGlhcyIgOiAiVmVyaWZ5IEV4aXN0aW5nIEFjY291bnQgYnkgUmUtYXV0aGVudGljYXRpb24gLSBhdXRoLW90cC1mb3JtIC0gQ29uZGl0aW9uYWwiLAogICAgImRlc2NyaXB0aW9uIiA6ICJGbG93IHRvIGRldGVybWluZSBpZiB0aGUgYXV0aC1vdHAtZm9ybSBhdXRoZW50aWNhdG9yIHNob3VsZCBiZSB1c2VkIG9yIG5vdC4iLAogICAgInByb3ZpZGVySWQiIDogImJhc2ljLWZsb3ciLAogICAgInRvcExldmVsIiA6IGZhbHNlLAogICAgImJ1aWx0SW4iIDogdHJ1ZSwKICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiIDogWyB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJjb25kaXRpb25hbC11c2VyLWNvbmZpZ3VyZWQiLAogICAgICAicmVxdWlyZW1lbnQiIDogIlJFUVVJUkVEIiwKICAgICAgInByaW9yaXR5IiA6IDEwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0sIHsKICAgICAgImF1dGhlbnRpY2F0b3IiIDogImF1dGgtb3RwLWZvcm0iLAogICAgICAicmVxdWlyZW1lbnQiIDogIlJFUVVJUkVEIiwKICAgICAgInByaW9yaXR5IiA6IDIwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0gXQogIH0sIHsKICAgICJpZCIgOiAiZTg5ODlkNDgtOWQwZC00Mjk1LTkyZDctNWE3MDg5ZDU2ZGMwIiwKICAgICJhbGlhcyIgOiAiYnJvd3NlciIsCiAgICAiZGVzY3JpcHRpb24iIDogImJyb3dzZXIgYmFzZWQgYXV0aGVudGljYXRpb24iLAogICAgInByb3ZpZGVySWQiIDogImJhc2ljLWZsb3ciLAogICAgInRvcExldmVsIiA6IHRydWUsCiAgICAiYnVpbHRJbiIgOiB0cnVlLAogICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyIgOiBbIHsKICAgICAgImF1dGhlbnRpY2F0b3IiIDogImF1dGgtY29va2llIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJBTFRFUk5BVElWRSIsCiAgICAgICJwcmlvcml0eSIgOiAxMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9LCB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJhdXRoLXNwbmVnbyIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiRElTQUJMRUQiLAogICAgICAicHJpb3JpdHkiIDogMjAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAiYXV0aGVudGljYXRvciIgOiAiaWRlbnRpdHktcHJvdmlkZXItcmVkaXJlY3RvciIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiQUxURVJOQVRJVkUiLAogICAgICAicHJpb3JpdHkiIDogMjUsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAicmVxdWlyZW1lbnQiIDogIkFMVEVSTkFUSVZFIiwKICAgICAgInByaW9yaXR5IiA6IDMwLAogICAgICAiZmxvd0FsaWFzIiA6ICJmb3JtcyIsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiB0cnVlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjM5NWE2ZjVlLTI4YWItNGZkNC05Y2ExLThkODIzNmZhYTU4NSIsCiAgICAiYWxpYXMiIDogImNsaWVudHMiLAogICAgImRlc2NyaXB0aW9uIiA6ICJCYXNlIGF1dGhlbnRpY2F0aW9uIGZvciBjbGllbnRzIiwKICAgICJwcm92aWRlcklkIiA6ICJjbGllbnQtZmxvdyIsCiAgICAidG9wTGV2ZWwiIDogdHJ1ZSwKICAgICJidWlsdEluIiA6IHRydWUsCiAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIiA6IFsgewogICAgICAiYXV0aGVudGljYXRvciIgOiAiY2xpZW50LXNlY3JldCIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiQUxURVJOQVRJVkUiLAogICAgICAicHJpb3JpdHkiIDogMTAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAiYXV0aGVudGljYXRvciIgOiAiY2xpZW50LWp3dCIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiQUxURVJOQVRJVkUiLAogICAgICAicHJpb3JpdHkiIDogMjAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICI4YzRjMjYzNy0wY2RjLTQ0ZTktODJjOS1iMjlhOThkZDgxN2EiLAogICAgImFsaWFzIiA6ICJkaXJlY3QgZ3JhbnQiLAogICAgImRlc2NyaXB0aW9uIiA6ICJPcGVuSUQgQ29ubmVjdCBSZXNvdXJjZSBPd25lciBHcmFudCIsCiAgICAicHJvdmlkZXJJZCIgOiAiYmFzaWMtZmxvdyIsCiAgICAidG9wTGV2ZWwiIDogdHJ1ZSwKICAgICJidWlsdEluIiA6IHRydWUsCiAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIiA6IFsgewogICAgICAiYXV0aGVudGljYXRvciIgOiAiZGlyZWN0LWdyYW50LXZhbGlkYXRlLXVzZXJuYW1lIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAxMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9LCB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJkaXJlY3QtZ3JhbnQtdmFsaWRhdGUtcGFzc3dvcmQiLAogICAgICAicmVxdWlyZW1lbnQiIDogIlJFUVVJUkVEIiwKICAgICAgInByaW9yaXR5IiA6IDIwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0sIHsKICAgICAgInJlcXVpcmVtZW50IiA6ICJDT05ESVRJT05BTCIsCiAgICAgICJwcmlvcml0eSIgOiAzMCwKICAgICAgImZsb3dBbGlhcyIgOiAiZGlyZWN0IGdyYW50IC0gZGlyZWN0LWdyYW50LXZhbGlkYXRlLW90cCAtIENvbmRpdGlvbmFsIiwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IHRydWUKICAgIH0gXQogIH0sIHsKICAgICJpZCIgOiAiMTM1OGYyMTUtZTQwYi00NzAxLWEyOTMtYjMxOWZmYjI1MGQyIiwKICAgICJhbGlhcyIgOiAiZGlyZWN0IGdyYW50IC0gZGlyZWN0LWdyYW50LXZhbGlkYXRlLW90cCAtIENvbmRpdGlvbmFsIiwKICAgICJkZXNjcmlwdGlvbiIgOiAiRmxvdyB0byBkZXRlcm1pbmUgaWYgdGhlIGRpcmVjdC1ncmFudC12YWxpZGF0ZS1vdHAgYXV0aGVudGljYXRvciBzaG91bGQgYmUgdXNlZCBvciBub3QuIiwKICAgICJwcm92aWRlcklkIiA6ICJiYXNpYy1mbG93IiwKICAgICJ0b3BMZXZlbCIgOiBmYWxzZSwKICAgICJidWlsdEluIiA6IHRydWUsCiAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIiA6IFsgewogICAgICAiYXV0aGVudGljYXRvciIgOiAiY29uZGl0aW9uYWwtdXNlci1jb25maWd1cmVkIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAxMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9LCB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJkaXJlY3QtZ3JhbnQtdmFsaWRhdGUtb3RwIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAyMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjAzNDgwOGNiLTg2NTEtNDRlOC1iNDU4LTRiYzMzNWMxMDJjMiIsCiAgICAiYWxpYXMiIDogImRvY2tlciBhdXRoIiwKICAgICJkZXNjcmlwdGlvbiIgOiAiVXNlZCBieSBEb2NrZXIgY2xpZW50cyB0byBhdXRoZW50aWNhdGUgYWdhaW5zdCB0aGUgSURQIiwKICAgICJwcm92aWRlcklkIiA6ICJiYXNpYy1mbG93IiwKICAgICJ0b3BMZXZlbCIgOiB0cnVlLAogICAgImJ1aWx0SW4iIDogdHJ1ZSwKICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiIDogWyB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJkb2NrZXItaHR0cC1iYXNpYy1hdXRoZW50aWNhdG9yIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAxMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogImE2YmMzY2VjLWJiZGYtNDM1OC1iZjI3LWQ1NGExMzM0ZTUyOCIsCiAgICAiYWxpYXMiIDogImZpcnN0IGJyb2tlciBsb2dpbiIsCiAgICAiZGVzY3JpcHRpb24iIDogIkFjdGlvbnMgdGFrZW4gYWZ0ZXIgZmlyc3QgYnJva2VyIGxvZ2luIHdpdGggaWRlbnRpdHkgcHJvdmlkZXIgYWNjb3VudCwgd2hpY2ggaXMgbm90IHlldCBsaW5rZWQgdG8gYW55IEtleWNsb2FrIGFjY291bnQiLAogICAgInByb3ZpZGVySWQiIDogImJhc2ljLWZsb3ciLAogICAgInRvcExldmVsIiA6IHRydWUsCiAgICAiYnVpbHRJbiIgOiB0cnVlLAogICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyIgOiBbIHsKICAgICAgImF1dGhlbnRpY2F0b3JDb25maWciIDogInJldmlldyBwcm9maWxlIGNvbmZpZyIsCiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJpZHAtcmV2aWV3LXByb2ZpbGUiLAogICAgICAicmVxdWlyZW1lbnQiIDogIlJFUVVJUkVEIiwKICAgICAgInByaW9yaXR5IiA6IDEwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0sIHsKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAyMCwKICAgICAgImZsb3dBbGlhcyIgOiAiZmlyc3QgYnJva2VyIGxvZ2luIC0gQWx0ZXJuYXRpdmVzIC0gMCIsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiB0cnVlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjdjZjAyNjdkLWFmNjktNGE3MS05NTAxLWZhMDlhYzFiODhmMiIsCiAgICAiYWxpYXMiIDogImZpcnN0IGJyb2tlciBsb2dpbiAtIEFsdGVybmF0aXZlcyAtIDAiLAogICAgImRlc2NyaXB0aW9uIiA6ICJTdWJmbG93IG9mIGZpcnN0IGJyb2tlciBsb2dpbiB3aXRoIGFsdGVybmF0aXZlIGV4ZWN1dGlvbnMiLAogICAgInByb3ZpZGVySWQiIDogImJhc2ljLWZsb3ciLAogICAgInRvcExldmVsIiA6IGZhbHNlLAogICAgImJ1aWx0SW4iIDogdHJ1ZSwKICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiIDogWyB7CiAgICAgICJhdXRoZW50aWNhdG9yQ29uZmlnIiA6ICJjcmVhdGUgdW5pcXVlIHVzZXIgY29uZmlnIiwKICAgICAgImF1dGhlbnRpY2F0b3IiIDogImlkcC1jcmVhdGUtdXNlci1pZi11bmlxdWUiLAogICAgICAicmVxdWlyZW1lbnQiIDogIkFMVEVSTkFUSVZFIiwKICAgICAgInByaW9yaXR5IiA6IDEwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0sIHsKICAgICAgInJlcXVpcmVtZW50IiA6ICJBTFRFUk5BVElWRSIsCiAgICAgICJwcmlvcml0eSIgOiAyMCwKICAgICAgImZsb3dBbGlhcyIgOiAiSGFuZGxlIEV4aXN0aW5nIEFjY291bnQiLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogdHJ1ZQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICI3YTJjZjhjNC05YTZkLTRjY2UtYTQzNC02ZWJlNmMxOWJlYWEiLAogICAgImFsaWFzIiA6ICJmb3JtcyIsCiAgICAiZGVzY3JpcHRpb24iIDogIlVzZXJuYW1lLCBwYXNzd29yZCwgb3RwIGFuZCBvdGhlciBhdXRoIGZvcm1zLiIsCiAgICAicHJvdmlkZXJJZCIgOiAiYmFzaWMtZmxvdyIsCiAgICAidG9wTGV2ZWwiIDogZmFsc2UsCiAgICAiYnVpbHRJbiIgOiB0cnVlLAogICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyIgOiBbIHsKICAgICAgImF1dGhlbnRpY2F0b3IiIDogImF1dGgtdXNlcm5hbWUtcGFzc3dvcmQtZm9ybSIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiUkVRVUlSRUQiLAogICAgICAicHJpb3JpdHkiIDogMTAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAicmVxdWlyZW1lbnQiIDogIkNPTkRJVElPTkFMIiwKICAgICAgInByaW9yaXR5IiA6IDIwLAogICAgICAiZmxvd0FsaWFzIiA6ICJmb3JtcyAtIGF1dGgtb3RwLWZvcm0gLSBDb25kaXRpb25hbCIsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiB0cnVlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjA2NzliOGQxLWM5YmQtNGE5Mi1hNjcwLWUzMDk3ODc3NmVjYSIsCiAgICAiYWxpYXMiIDogImZvcm1zIC0gYXV0aC1vdHAtZm9ybSAtIENvbmRpdGlvbmFsIiwKICAgICJkZXNjcmlwdGlvbiIgOiAiRmxvdyB0byBkZXRlcm1pbmUgaWYgdGhlIGF1dGgtb3RwLWZvcm0gYXV0aGVudGljYXRvciBzaG91bGQgYmUgdXNlZCBvciBub3QuIiwKICAgICJwcm92aWRlcklkIiA6ICJiYXNpYy1mbG93IiwKICAgICJ0b3BMZXZlbCIgOiBmYWxzZSwKICAgICJidWlsdEluIiA6IHRydWUsCiAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIiA6IFsgewogICAgICAiYXV0aGVudGljYXRvciIgOiAiY29uZGl0aW9uYWwtdXNlci1jb25maWd1cmVkIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAxMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9LCB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJhdXRoLW90cC1mb3JtIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAyMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogImE1NDhhMmU2LTI4YTMtNGM5Ni04OTA0LTAxZWM0NjMxMGVhZSIsCiAgICAiYWxpYXMiIDogInJlZ2lzdHJhdGlvbiIsCiAgICAiZGVzY3JpcHRpb24iIDogInJlZ2lzdHJhdGlvbiBmbG93IiwKICAgICJwcm92aWRlcklkIiA6ICJiYXNpYy1mbG93IiwKICAgICJ0b3BMZXZlbCIgOiB0cnVlLAogICAgImJ1aWx0SW4iIDogdHJ1ZSwKICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiIDogWyB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJyZWdpc3RyYXRpb24tcGFnZS1mb3JtIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAxMCwKICAgICAgImZsb3dBbGlhcyIgOiAicmVnaXN0cmF0aW9uIGZvcm0iLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogdHJ1ZQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICJmOWI2OWQ1MC1mNzcxLTRjNDItOTQ5YS04NmJhYmI2YWE3ZjIiLAogICAgImFsaWFzIiA6ICJyZWdpc3RyYXRpb24gZm9ybSIsCiAgICAiZGVzY3JpcHRpb24iIDogInJlZ2lzdHJhdGlvbiBmb3JtIiwKICAgICJwcm92aWRlcklkIiA6ICJmb3JtLWZsb3ciLAogICAgInRvcExldmVsIiA6IGZhbHNlLAogICAgImJ1aWx0SW4iIDogdHJ1ZSwKICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiIDogWyB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJyZWdpc3RyYXRpb24tdXNlci1jcmVhdGlvbiIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiUkVRVUlSRUQiLAogICAgICAicHJpb3JpdHkiIDogMjAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAiYXV0aGVudGljYXRvciIgOiAicmVnaXN0cmF0aW9uLXByb2ZpbGUtYWN0aW9uIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiA0MCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9LCB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJyZWdpc3RyYXRpb24tcGFzc3dvcmQtYWN0aW9uIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiA1MCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9LCB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJyZWdpc3RyYXRpb24tcmVjYXB0Y2hhLWFjdGlvbiIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiRElTQUJMRUQiLAogICAgICAicHJpb3JpdHkiIDogNjAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSBdCiAgfSwgewogICAgImlkIiA6ICIyOTViOGE3Ni0zYzVhLTQ3MjYtOTVhMi1kZTdkZDFkODY2Y2EiLAogICAgImFsaWFzIiA6ICJyZXNldCBjcmVkZW50aWFscyIsCiAgICAiZGVzY3JpcHRpb24iIDogIlJlc2V0IGNyZWRlbnRpYWxzIGZvciBhIHVzZXIgaWYgdGhleSBmb3Jnb3QgdGhlaXIgcGFzc3dvcmQgb3Igc29tZXRoaW5nIiwKICAgICJwcm92aWRlcklkIiA6ICJiYXNpYy1mbG93IiwKICAgICJ0b3BMZXZlbCIgOiB0cnVlLAogICAgImJ1aWx0SW4iIDogdHJ1ZSwKICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiIDogWyB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJyZXNldC1jcmVkZW50aWFscy1jaG9vc2UtdXNlciIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiUkVRVUlSRUQiLAogICAgICAicHJpb3JpdHkiIDogMTAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAiYXV0aGVudGljYXRvciIgOiAicmVzZXQtY3JlZGVudGlhbC1lbWFpbCIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiUkVRVUlSRUQiLAogICAgICAicHJpb3JpdHkiIDogMjAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAiYXV0aGVudGljYXRvciIgOiAicmVzZXQtcGFzc3dvcmQiLAogICAgICAicmVxdWlyZW1lbnQiIDogIlJFUVVJUkVEIiwKICAgICAgInByaW9yaXR5IiA6IDMwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0sIHsKICAgICAgInJlcXVpcmVtZW50IiA6ICJDT05ESVRJT05BTCIsCiAgICAgICJwcmlvcml0eSIgOiA0MCwKICAgICAgImZsb3dBbGlhcyIgOiAicmVzZXQgY3JlZGVudGlhbHMgLSByZXNldC1vdHAgLSBDb25kaXRpb25hbCIsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiB0cnVlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogImVmYjIwOTk2LWQyNWEtNGUwMy1hMWY3LTJjYzY0YmU5ZjZkZiIsCiAgICAiYWxpYXMiIDogInJlc2V0IGNyZWRlbnRpYWxzIC0gcmVzZXQtb3RwIC0gQ29uZGl0aW9uYWwiLAogICAgImRlc2NyaXB0aW9uIiA6ICJGbG93IHRvIGRldGVybWluZSBpZiB0aGUgcmVzZXQtb3RwIGF1dGhlbnRpY2F0b3Igc2hvdWxkIGJlIHVzZWQgb3Igbm90LiIsCiAgICAicHJvdmlkZXJJZCIgOiAiYmFzaWMtZmxvdyIsCiAgICAidG9wTGV2ZWwiIDogZmFsc2UsCiAgICAiYnVpbHRJbiIgOiB0cnVlLAogICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyIgOiBbIHsKICAgICAgImF1dGhlbnRpY2F0b3IiIDogImNvbmRpdGlvbmFsLXVzZXItY29uZmlndXJlZCIsCiAgICAgICJyZXF1aXJlbWVudCIgOiAiUkVRVUlSRUQiLAogICAgICAicHJpb3JpdHkiIDogMTAsCiAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIiA6IGZhbHNlLAogICAgICAiYXV0aGV0aWNhdG9yRmxvdyIgOiBmYWxzZQogICAgfSwgewogICAgICAiYXV0aGVudGljYXRvciIgOiAicmVzZXQtb3RwIiwKICAgICAgInJlcXVpcmVtZW50IiA6ICJSRVFVSVJFRCIsCiAgICAgICJwcmlvcml0eSIgOiAyMCwKICAgICAgInVzZXJTZXR1cEFsbG93ZWQiIDogZmFsc2UsCiAgICAgICJhdXRoZXRpY2F0b3JGbG93IiA6IGZhbHNlCiAgICB9IF0KICB9LCB7CiAgICAiaWQiIDogIjlkOGQ0ZGNkLWUxNjctNGQ0MC04OWYxLTE4MjM3ZDYyYmJiNyIsCiAgICAiYWxpYXMiIDogInNhbWwgZWNwIiwKICAgICJkZXNjcmlwdGlvbiIgOiAiU0FNTCBFQ1AgUHJvZmlsZSBBdXRoZW50aWNhdGlvbiBGbG93IiwKICAgICJwcm92aWRlcklkIiA6ICJiYXNpYy1mbG93IiwKICAgICJ0b3BMZXZlbCIgOiB0cnVlLAogICAgImJ1aWx0SW4iIDogdHJ1ZSwKICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiIDogWyB7CiAgICAgICJhdXRoZW50aWNhdG9yIiA6ICJodHRwLWJhc2ljLWF1dGhlbnRpY2F0b3IiLAogICAgICAicmVxdWlyZW1lbnQiIDogIlJFUVVJUkVEIiwKICAgICAgInByaW9yaXR5IiA6IDEwLAogICAgICAidXNlclNldHVwQWxsb3dlZCIgOiBmYWxzZSwKICAgICAgImF1dGhldGljYXRvckZsb3ciIDogZmFsc2UKICAgIH0gXQogIH0gXSwKICAiYXV0aGVudGljYXRvckNvbmZpZyIgOiBbIHsKICAgICJpZCIgOiAiZjIxMmUyMzUtMjdmMC00ZGZkLTlhYzYtNTFiNGMyNDJjNjdhIiwKICAgICJhbGlhcyIgOiAiY3JlYXRlIHVuaXF1ZSB1c2VyIGNvbmZpZyIsCiAgICAiY29uZmlnIiA6IHsKICAgICAgInJlcXVpcmUucGFzc3dvcmQudXBkYXRlLmFmdGVyLnJlZ2lzdHJhdGlvbiIgOiAiZmFsc2UiCiAgICB9CiAgfSwgewogICAgImlkIiA6ICJkMjQyMDI0My0yNDVmLTRhOWQtOWIxZi00ZjA2N2M2MGNmNGUiLAogICAgImFsaWFzIiA6ICJyZXZpZXcgcHJvZmlsZSBjb25maWciLAogICAgImNvbmZpZyIgOiB7CiAgICAgICJ1cGRhdGUucHJvZmlsZS5vbi5maXJzdC5sb2dpbiIgOiAibWlzc2luZyIKICAgIH0KICB9IF0sCiAgInJlcXVpcmVkQWN0aW9ucyIgOiBbIHsKICAgICJhbGlhcyIgOiAiQ09ORklHVVJFX1RPVFAiLAogICAgIm5hbWUiIDogIkNvbmZpZ3VyZSBPVFAiLAogICAgInByb3ZpZGVySWQiIDogIkNPTkZJR1VSRV9UT1RQIiwKICAgICJlbmFibGVkIiA6IHRydWUsCiAgICAiZGVmYXVsdEFjdGlvbiIgOiBmYWxzZSwKICAgICJwcmlvcml0eSIgOiAxMCwKICAgICJjb25maWciIDogeyB9CiAgfSwgewogICAgImFsaWFzIiA6ICJ0ZXJtc19hbmRfY29uZGl0aW9ucyIsCiAgICAibmFtZSIgOiAiVGVybXMgYW5kIENvbmRpdGlvbnMiLAogICAgInByb3ZpZGVySWQiIDogInRlcm1zX2FuZF9jb25kaXRpb25zIiwKICAgICJlbmFibGVkIiA6IGZhbHNlLAogICAgImRlZmF1bHRBY3Rpb24iIDogZmFsc2UsCiAgICAicHJpb3JpdHkiIDogMjAsCiAgICAiY29uZmlnIiA6IHsgfQogIH0sIHsKICAgICJhbGlhcyIgOiAiVVBEQVRFX1BBU1NXT1JEIiwKICAgICJuYW1lIiA6ICJVcGRhdGUgUGFzc3dvcmQiLAogICAgInByb3ZpZGVySWQiIDogIlVQREFURV9QQVNTV09SRCIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgImRlZmF1bHRBY3Rpb24iIDogZmFsc2UsCiAgICAicHJpb3JpdHkiIDogMzAsCiAgICAiY29uZmlnIiA6IHsgfQogIH0sIHsKICAgICJhbGlhcyIgOiAiVVBEQVRFX1BST0ZJTEUiLAogICAgIm5hbWUiIDogIlVwZGF0ZSBQcm9maWxlIiwKICAgICJwcm92aWRlcklkIiA6ICJVUERBVEVfUFJPRklMRSIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgImRlZmF1bHRBY3Rpb24iIDogZmFsc2UsCiAgICAicHJpb3JpdHkiIDogNDAsCiAgICAiY29uZmlnIiA6IHsgfQogIH0sIHsKICAgICJhbGlhcyIgOiAiVkVSSUZZX0VNQUlMIiwKICAgICJuYW1lIiA6ICJWZXJpZnkgRW1haWwiLAogICAgInByb3ZpZGVySWQiIDogIlZFUklGWV9FTUFJTCIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgImRlZmF1bHRBY3Rpb24iIDogZmFsc2UsCiAgICAicHJpb3JpdHkiIDogNTAsCiAgICAiY29uZmlnIiA6IHsgfQogIH0sIHsKICAgICJhbGlhcyIgOiAidXBkYXRlX3VzZXJfbG9jYWxlIiwKICAgICJuYW1lIiA6ICJVcGRhdGUgVXNlciBMb2NhbGUiLAogICAgInByb3ZpZGVySWQiIDogInVwZGF0ZV91c2VyX2xvY2FsZSIsCiAgICAiZW5hYmxlZCIgOiB0cnVlLAogICAgImRlZmF1bHRBY3Rpb24iIDogZmFsc2UsCiAgICAicHJpb3JpdHkiIDogMTAwMCwKICAgICJjb25maWciIDogeyB9CiAgfSBdLAogICJicm93c2VyRmxvdyIgOiAiYnJvd3NlciIsCiAgInJlZ2lzdHJhdGlvbkZsb3ciIDogInJlZ2lzdHJhdGlvbiIsCiAgImRpcmVjdEdyYW50RmxvdyIgOiAiZGlyZWN0IGdyYW50IiwKICAicmVzZXRDcmVkZW50aWFsc0Zsb3ciIDogInJlc2V0IGNyZWRlbnRpYWxzIiwKICAiY2xpZW50QXV0aGVudGljYXRpb25GbG93IiA6ICJjbGllbnRzIiwKICAiZG9ja2VyQXV0aGVudGljYXRpb25GbG93IiA6ICJkb2NrZXIgYXV0aCIsCiAgImF0dHJpYnV0ZXMiIDogeyB9LAogICJrZXljbG9ha1ZlcnNpb24iIDogIjcuNC4wLkdBIiwKICAidXNlck1hbmFnZWRBY2Nlc3NBbGxvd2VkIiA6IGZhbHNlCn0gXQo=

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: sso-service-account-init
    labels:
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  secrets:
  - name: sso-app-secret-init
- apiVersion: v1
  kind: Service
  metadata:
    name: secure-sso-init
    labels:
      application: sso-init
      component: server
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  spec:
    ports:
    - port: 8443
      targetPort: 8443
    selector:
      deploymentConfig: sso-init
- apiVersion: v1
  kind: Service
  metadata:
    name: sso-init
    labels:
      application: sso-init
      component: server
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: sso-init

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: sso-init
    labels:
      application: sso-init
      component: server
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        timeoutSeconds: 10800
    replicas: 1
    selector:
      deploymentConfig: sso-init
    template:
      metadata:
        name: sso-init
        labels:
          deploymentConfig: sso-init
          application: sso-init
          component: server
          app.kubernetes.io/part-of: secured-rhpam-example
          app.kubernetes.io/name: secured-sso
          app.kubernetes.io/component: backend
          app.openshift.io/runtime: sso-init
          app.openshift.io/runtime-version: "7.4"
      spec:
        serviceAccountName: sso-service-account-init
        terminationGracePeriodSeconds: 30
        containers:
        - name: sso-init
          image: registry.redhat.io/rh-sso-7/sso74-openshift-rhel8
          imagePullPolicy: Always
          volumeMounts:
          - name: sso-demo-volume
            mountPath: "/opt/sso-demo"
            readOnly: true
          - name: eap-keystore-volume
            mountPath: "/etc/eap-secret-volume"
            readOnly: true
          - name: eap-jgroups-keystore-volume
            mountPath: "/etc/jgroups-encrypt-secret-volume"
            readOnly: true
          - name: sso-truststore-volume
            mountPath: "/etc/sso-secret-volume"
            readOnly: true
          # see https://issues.jboss.org/browse/CLOUD-2195
          - name: workaround-for-cloud-2195
            mountPath: /opt/eap/standalone/configuration/standalone_xml_history
          livenessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/livenessProbe.sh"
            initialDelaySeconds: 180
          readinessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/readinessProbe.sh"
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
          env:
          - name: SSO_HOSTNAME          
          - name: HOSTNAME_HTTP
          - name: HOSTNAME_HTTPS
          - name: SSO_IMPORT_FILE
            value: "/opt/sso-demo/sso-demo.json"
          - name: HTTPS_KEYSTORE_DIR
            value: "/etc/eap-secret-volume"
          - name: HTTPS_KEYSTORE
            value: "keystore.jks"
          - name: HTTPS_KEYSTORE_TYPE
          - name: HTTPS_NAME
            value: "jboss"
          - name: HTTPS_PASSWORD
            value: "mykeystorepass"
          - name: JGROUPS_ENCRYPT_SECRET
            value: "sso-app-secret"
          - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
            value: "/etc/jgroups-encrypt-secret-volume"
          - name: JGROUPS_ENCRYPT_KEYSTORE
            value: "jgroups.jceks"
          - name: JGROUPS_ENCRYPT_NAME
          - name: JGROUPS_ENCRYPT_PASSWORD
          - name: JGROUPS_CLUSTER_PASSWORD
          - name: SSO_SERVICE_USERNAME
          - name: SSO_SERVICE_PASSWORD
          - name: SSO_TRUSTSTORE
          - name: SSO_TRUSTSTORE_DIR
            value: "/etc/sso-secret-volume"
          - name: SSO_TRUSTSTORE_PASSWORD
# DB Integration for Persistence
          - name: DB_SERVICE_PREFIX_MAPPING
            value: sso-init-postgresql=DB
          - name: DB_JNDI
            value: 'java:jboss/datasources/KeycloakDS'
          - name: DB_USERNAME
            value: rhssodbusername
          - name: DB_PASSWORD
            value: rhssodbpassword
          - name: DB_DATABASE
            value: rhsso
          - name: TX_DATABASE_PREFIX_MAPPING
            value: sso-init-postgresql=DB
          - name: DB_MIN_POOL_SIZE
            value: "5"
          - name: DB_MAX_POOL_SIZE
            value: "10"           
          - name: DB_TX_ISOLATION  
          - name: JAVA_OPTS_APPEND
            value: -Dkeycloak.profile.feature.upload_scripts=enabled            
        volumes:
        - name: sso-demo-volume
          secret:
            secretName: sso-demo-secret-init
        - name: eap-keystore-volume
          secret:
            secretName: "sso-app-secret-init"
        - name: eap-jgroups-keystore-volume
          secret:
            secretName: "sso-app-secret-init"
        - name: sso-truststore-volume
          secret:
            secretName: "sso-app-secret-init"
        # see https://issues.jboss.org/browse/CLOUD-2195
        - name: workaround-for-cloud-2195
          emptyDir: {}
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    name: secure-sso-init
    labels:
      application: sso-init
      component: server
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  spec:
    to:
      kind: Service
      name: secure-sso-init
    tls:
      termination: passthrough
- apiVersion: v1
  kind: Route
  metadata:
    name: sso-init
    labels:
      application: sso-init
      component: server
      app.kubernetes.io/part-of: secured-rhpam-example
      app.kubernetes.io/name: secured-sso-init
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso-init
      app.openshift.io/runtime-version: "7.4"
  spec:
    to:
      kind: Service
      name: sso-init
     
